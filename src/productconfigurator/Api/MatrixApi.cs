/*
 * Product Configurator Service
 *
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using productconfigurator.Client;
using productconfigurator.Client.Auth;
using productconfigurator.Model;

namespace productconfigurator.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMatrixApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Matrix
        /// </summary>
        /// <remarks>
        /// Establish a new matrix by specifying the tenant ID. Utilize a POST request with the required matrix details in the body for seamless customization and expansion of matrix configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratormatrixEntity</returns>
        ProductconfiguratormatrixEntity ProductConfiguratorCreateMatrix(string tenantId, ProductConfiguratorCreateMatrixRequest body, int operationIndex = 0);

        /// <summary>
        /// Create Matrix
        /// </summary>
        /// <remarks>
        /// Establish a new matrix by specifying the tenant ID. Utilize a POST request with the required matrix details in the body for seamless customization and expansion of matrix configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratormatrixEntity</returns>
        ApiResponse<ProductconfiguratormatrixEntity> ProductConfiguratorCreateMatrixWithHttpInfo(string tenantId, ProductConfiguratorCreateMatrixRequest body, int operationIndex = 0);
        /// <summary>
        /// Delete Matrix
        /// </summary>
        /// <remarks>
        /// Remove a specific matrix by specifying the tenant and matrix IDs. Ensure precision in matrix management with a straightforward DELETE request, simplifying the elimination of unwanted matrix configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ProductConfiguratorDeleteMatrix(string tenantId, string matrixId, int operationIndex = 0);

        /// <summary>
        /// Delete Matrix
        /// </summary>
        /// <remarks>
        /// Remove a specific matrix by specifying the tenant and matrix IDs. Ensure precision in matrix management with a straightforward DELETE request, simplifying the elimination of unwanted matrix configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ProductConfiguratorDeleteMatrixWithHttpInfo(string tenantId, string matrixId, int operationIndex = 0);
        /// <summary>
        /// Get Matrix
        /// </summary>
        /// <remarks>
        /// Retrieve matrix details by specifying the tenant and matrix IDs. Utilize a GET request for a comprehensive view of matrix configurations within your product configurator service.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratormatrixEntity</returns>
        ProductconfiguratormatrixEntity ProductConfiguratorGetMatrix(string tenantId, string matrixId, int operationIndex = 0);

        /// <summary>
        /// Get Matrix
        /// </summary>
        /// <remarks>
        /// Retrieve matrix details by specifying the tenant and matrix IDs. Utilize a GET request for a comprehensive view of matrix configurations within your product configurator service.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratormatrixEntity</returns>
        ApiResponse<ProductconfiguratormatrixEntity> ProductConfiguratorGetMatrixWithHttpInfo(string tenantId, string matrixId, int operationIndex = 0);
        /// <summary>
        /// List Matrices
        /// </summary>
        /// <remarks>
        /// Retrieve a list of matrices for a specific configurator based on tenant and configurator IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all matrices associated with the configurator. Streamline matrix management effortlessly.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatrixListMatricesResponse</returns>
        MatrixListMatricesResponse ProductConfiguratorListMatrices(string tenantId, string configuratorId, string pageSize, ProductConfiguratorListMatricesRequest body, int operationIndex = 0);

        /// <summary>
        /// List Matrices
        /// </summary>
        /// <remarks>
        /// Retrieve a list of matrices for a specific configurator based on tenant and configurator IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all matrices associated with the configurator. Streamline matrix management effortlessly.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatrixListMatricesResponse</returns>
        ApiResponse<MatrixListMatricesResponse> ProductConfiguratorListMatricesWithHttpInfo(string tenantId, string configuratorId, string pageSize, ProductConfiguratorListMatricesRequest body, int operationIndex = 0);
        /// <summary>
        /// Remove Pricelist from Matrix
        /// </summary>
        /// <remarks>
        /// Remove a specific pricelist from a matrix by specifying the tenant, matrix, and pricelist IDs. Use a DELETE request for precise management of pricelist configurations within your product configurator service.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="pricelistGrn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratormatrixEntity</returns>
        ProductconfiguratormatrixEntity ProductConfiguratorRemovePricelistFromMatrix(string tenantId, string matrixId, string pricelistGrn, int operationIndex = 0);

        /// <summary>
        /// Remove Pricelist from Matrix
        /// </summary>
        /// <remarks>
        /// Remove a specific pricelist from a matrix by specifying the tenant, matrix, and pricelist IDs. Use a DELETE request for precise management of pricelist configurations within your product configurator service.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="pricelistGrn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratormatrixEntity</returns>
        ApiResponse<ProductconfiguratormatrixEntity> ProductConfiguratorRemovePricelistFromMatrixWithHttpInfo(string tenantId, string matrixId, string pricelistGrn, int operationIndex = 0);
        /// <summary>
        /// Update Matrix
        /// </summary>
        /// <remarks>
        /// Modify an existing matrix by specifying the tenant and matrix IDs. Utilize a PUT request with updated matrix details in the body for seamless customization and fine-tuning of your product configurations. Keep your matrices in sync effortlessly.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratormatrixEntity</returns>
        ProductconfiguratormatrixEntity ProductConfiguratorUpdateMatrix(string tenantId, string matrixId, ProductConfiguratorUpdateMatrixRequest body, int operationIndex = 0);

        /// <summary>
        /// Update Matrix
        /// </summary>
        /// <remarks>
        /// Modify an existing matrix by specifying the tenant and matrix IDs. Utilize a PUT request with updated matrix details in the body for seamless customization and fine-tuning of your product configurations. Keep your matrices in sync effortlessly.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratormatrixEntity</returns>
        ApiResponse<ProductconfiguratormatrixEntity> ProductConfiguratorUpdateMatrixWithHttpInfo(string tenantId, string matrixId, ProductConfiguratorUpdateMatrixRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMatrixApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Matrix
        /// </summary>
        /// <remarks>
        /// Establish a new matrix by specifying the tenant ID. Utilize a POST request with the required matrix details in the body for seamless customization and expansion of matrix configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratormatrixEntity</returns>
        System.Threading.Tasks.Task<ProductconfiguratormatrixEntity> ProductConfiguratorCreateMatrixAsync(string tenantId, ProductConfiguratorCreateMatrixRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Matrix
        /// </summary>
        /// <remarks>
        /// Establish a new matrix by specifying the tenant ID. Utilize a POST request with the required matrix details in the body for seamless customization and expansion of matrix configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratormatrixEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratormatrixEntity>> ProductConfiguratorCreateMatrixWithHttpInfoAsync(string tenantId, ProductConfiguratorCreateMatrixRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Matrix
        /// </summary>
        /// <remarks>
        /// Remove a specific matrix by specifying the tenant and matrix IDs. Ensure precision in matrix management with a straightforward DELETE request, simplifying the elimination of unwanted matrix configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ProductConfiguratorDeleteMatrixAsync(string tenantId, string matrixId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Matrix
        /// </summary>
        /// <remarks>
        /// Remove a specific matrix by specifying the tenant and matrix IDs. Ensure precision in matrix management with a straightforward DELETE request, simplifying the elimination of unwanted matrix configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductConfiguratorDeleteMatrixWithHttpInfoAsync(string tenantId, string matrixId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Matrix
        /// </summary>
        /// <remarks>
        /// Retrieve matrix details by specifying the tenant and matrix IDs. Utilize a GET request for a comprehensive view of matrix configurations within your product configurator service.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratormatrixEntity</returns>
        System.Threading.Tasks.Task<ProductconfiguratormatrixEntity> ProductConfiguratorGetMatrixAsync(string tenantId, string matrixId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Matrix
        /// </summary>
        /// <remarks>
        /// Retrieve matrix details by specifying the tenant and matrix IDs. Utilize a GET request for a comprehensive view of matrix configurations within your product configurator service.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratormatrixEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratormatrixEntity>> ProductConfiguratorGetMatrixWithHttpInfoAsync(string tenantId, string matrixId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Matrices
        /// </summary>
        /// <remarks>
        /// Retrieve a list of matrices for a specific configurator based on tenant and configurator IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all matrices associated with the configurator. Streamline matrix management effortlessly.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatrixListMatricesResponse</returns>
        System.Threading.Tasks.Task<MatrixListMatricesResponse> ProductConfiguratorListMatricesAsync(string tenantId, string configuratorId, string pageSize, ProductConfiguratorListMatricesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Matrices
        /// </summary>
        /// <remarks>
        /// Retrieve a list of matrices for a specific configurator based on tenant and configurator IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all matrices associated with the configurator. Streamline matrix management effortlessly.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatrixListMatricesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MatrixListMatricesResponse>> ProductConfiguratorListMatricesWithHttpInfoAsync(string tenantId, string configuratorId, string pageSize, ProductConfiguratorListMatricesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove Pricelist from Matrix
        /// </summary>
        /// <remarks>
        /// Remove a specific pricelist from a matrix by specifying the tenant, matrix, and pricelist IDs. Use a DELETE request for precise management of pricelist configurations within your product configurator service.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="pricelistGrn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratormatrixEntity</returns>
        System.Threading.Tasks.Task<ProductconfiguratormatrixEntity> ProductConfiguratorRemovePricelistFromMatrixAsync(string tenantId, string matrixId, string pricelistGrn, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove Pricelist from Matrix
        /// </summary>
        /// <remarks>
        /// Remove a specific pricelist from a matrix by specifying the tenant, matrix, and pricelist IDs. Use a DELETE request for precise management of pricelist configurations within your product configurator service.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="pricelistGrn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratormatrixEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratormatrixEntity>> ProductConfiguratorRemovePricelistFromMatrixWithHttpInfoAsync(string tenantId, string matrixId, string pricelistGrn, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Matrix
        /// </summary>
        /// <remarks>
        /// Modify an existing matrix by specifying the tenant and matrix IDs. Utilize a PUT request with updated matrix details in the body for seamless customization and fine-tuning of your product configurations. Keep your matrices in sync effortlessly.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratormatrixEntity</returns>
        System.Threading.Tasks.Task<ProductconfiguratormatrixEntity> ProductConfiguratorUpdateMatrixAsync(string tenantId, string matrixId, ProductConfiguratorUpdateMatrixRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Matrix
        /// </summary>
        /// <remarks>
        /// Modify an existing matrix by specifying the tenant and matrix IDs. Utilize a PUT request with updated matrix details in the body for seamless customization and fine-tuning of your product configurations. Keep your matrices in sync effortlessly.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratormatrixEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratormatrixEntity>> ProductConfiguratorUpdateMatrixWithHttpInfoAsync(string tenantId, string matrixId, ProductConfiguratorUpdateMatrixRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMatrixApi : IMatrixApiSync, IMatrixApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MatrixApi : IMatrixApi
    {
        private productconfigurator.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MatrixApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MatrixApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatrixApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MatrixApi(string basePath)
        {
            this.Configuration = productconfigurator.Client.Configuration.MergeConfigurations(
                productconfigurator.Client.GlobalConfiguration.Instance,
                new productconfigurator.Client.Configuration { BasePath = basePath }
            );
            this.Client = new productconfigurator.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new productconfigurator.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = productconfigurator.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatrixApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MatrixApi(productconfigurator.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = productconfigurator.Client.Configuration.MergeConfigurations(
                productconfigurator.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new productconfigurator.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new productconfigurator.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = productconfigurator.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatrixApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MatrixApi(productconfigurator.Client.ISynchronousClient client, productconfigurator.Client.IAsynchronousClient asyncClient, productconfigurator.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = productconfigurator.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public productconfigurator.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public productconfigurator.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public productconfigurator.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public productconfigurator.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Matrix Establish a new matrix by specifying the tenant ID. Utilize a POST request with the required matrix details in the body for seamless customization and expansion of matrix configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratormatrixEntity</returns>
        public ProductconfiguratormatrixEntity ProductConfiguratorCreateMatrix(string tenantId, ProductConfiguratorCreateMatrixRequest body, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratormatrixEntity> localVarResponse = ProductConfiguratorCreateMatrixWithHttpInfo(tenantId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Matrix Establish a new matrix by specifying the tenant ID. Utilize a POST request with the required matrix details in the body for seamless customization and expansion of matrix configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratormatrixEntity</returns>
        public productconfigurator.Client.ApiResponse<ProductconfiguratormatrixEntity> ProductConfiguratorCreateMatrixWithHttpInfo(string tenantId, ProductConfiguratorCreateMatrixRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MatrixApi->ProductConfiguratorCreateMatrix");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling MatrixApi->ProductConfiguratorCreateMatrix");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MatrixApi.ProductConfiguratorCreateMatrix";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductconfiguratormatrixEntity>("/v1/{tenantId}/matrix/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorCreateMatrix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Matrix Establish a new matrix by specifying the tenant ID. Utilize a POST request with the required matrix details in the body for seamless customization and expansion of matrix configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratormatrixEntity</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratormatrixEntity> ProductConfiguratorCreateMatrixAsync(string tenantId, ProductConfiguratorCreateMatrixRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratormatrixEntity> localVarResponse = await ProductConfiguratorCreateMatrixWithHttpInfoAsync(tenantId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Matrix Establish a new matrix by specifying the tenant ID. Utilize a POST request with the required matrix details in the body for seamless customization and expansion of matrix configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratormatrixEntity)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<ProductconfiguratormatrixEntity>> ProductConfiguratorCreateMatrixWithHttpInfoAsync(string tenantId, ProductConfiguratorCreateMatrixRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MatrixApi->ProductConfiguratorCreateMatrix");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling MatrixApi->ProductConfiguratorCreateMatrix");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MatrixApi.ProductConfiguratorCreateMatrix";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductconfiguratormatrixEntity>("/v1/{tenantId}/matrix/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorCreateMatrix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Matrix Remove a specific matrix by specifying the tenant and matrix IDs. Ensure precision in matrix management with a straightforward DELETE request, simplifying the elimination of unwanted matrix configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ProductConfiguratorDeleteMatrix(string tenantId, string matrixId, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<Object> localVarResponse = ProductConfiguratorDeleteMatrixWithHttpInfo(tenantId, matrixId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Matrix Remove a specific matrix by specifying the tenant and matrix IDs. Ensure precision in matrix management with a straightforward DELETE request, simplifying the elimination of unwanted matrix configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public productconfigurator.Client.ApiResponse<Object> ProductConfiguratorDeleteMatrixWithHttpInfo(string tenantId, string matrixId, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MatrixApi->ProductConfiguratorDeleteMatrix");
            }

            // verify the required parameter 'matrixId' is set
            if (matrixId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'matrixId' when calling MatrixApi->ProductConfiguratorDeleteMatrix");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("matrixId", productconfigurator.Client.ClientUtils.ParameterToString(matrixId)); // path parameter

            localVarRequestOptions.Operation = "MatrixApi.ProductConfiguratorDeleteMatrix";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/{tenantId}/matrix/{matrixId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorDeleteMatrix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Matrix Remove a specific matrix by specifying the tenant and matrix IDs. Ensure precision in matrix management with a straightforward DELETE request, simplifying the elimination of unwanted matrix configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ProductConfiguratorDeleteMatrixAsync(string tenantId, string matrixId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<Object> localVarResponse = await ProductConfiguratorDeleteMatrixWithHttpInfoAsync(tenantId, matrixId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Matrix Remove a specific matrix by specifying the tenant and matrix IDs. Ensure precision in matrix management with a straightforward DELETE request, simplifying the elimination of unwanted matrix configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<Object>> ProductConfiguratorDeleteMatrixWithHttpInfoAsync(string tenantId, string matrixId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MatrixApi->ProductConfiguratorDeleteMatrix");
            }

            // verify the required parameter 'matrixId' is set
            if (matrixId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'matrixId' when calling MatrixApi->ProductConfiguratorDeleteMatrix");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("matrixId", productconfigurator.Client.ClientUtils.ParameterToString(matrixId)); // path parameter

            localVarRequestOptions.Operation = "MatrixApi.ProductConfiguratorDeleteMatrix";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/{tenantId}/matrix/{matrixId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorDeleteMatrix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Matrix Retrieve matrix details by specifying the tenant and matrix IDs. Utilize a GET request for a comprehensive view of matrix configurations within your product configurator service.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratormatrixEntity</returns>
        public ProductconfiguratormatrixEntity ProductConfiguratorGetMatrix(string tenantId, string matrixId, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratormatrixEntity> localVarResponse = ProductConfiguratorGetMatrixWithHttpInfo(tenantId, matrixId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Matrix Retrieve matrix details by specifying the tenant and matrix IDs. Utilize a GET request for a comprehensive view of matrix configurations within your product configurator service.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratormatrixEntity</returns>
        public productconfigurator.Client.ApiResponse<ProductconfiguratormatrixEntity> ProductConfiguratorGetMatrixWithHttpInfo(string tenantId, string matrixId, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MatrixApi->ProductConfiguratorGetMatrix");
            }

            // verify the required parameter 'matrixId' is set
            if (matrixId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'matrixId' when calling MatrixApi->ProductConfiguratorGetMatrix");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("matrixId", productconfigurator.Client.ClientUtils.ParameterToString(matrixId)); // path parameter

            localVarRequestOptions.Operation = "MatrixApi.ProductConfiguratorGetMatrix";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductconfiguratormatrixEntity>("/v1/{tenantId}/matrix/{matrixId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorGetMatrix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Matrix Retrieve matrix details by specifying the tenant and matrix IDs. Utilize a GET request for a comprehensive view of matrix configurations within your product configurator service.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratormatrixEntity</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratormatrixEntity> ProductConfiguratorGetMatrixAsync(string tenantId, string matrixId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratormatrixEntity> localVarResponse = await ProductConfiguratorGetMatrixWithHttpInfoAsync(tenantId, matrixId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Matrix Retrieve matrix details by specifying the tenant and matrix IDs. Utilize a GET request for a comprehensive view of matrix configurations within your product configurator service.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratormatrixEntity)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<ProductconfiguratormatrixEntity>> ProductConfiguratorGetMatrixWithHttpInfoAsync(string tenantId, string matrixId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MatrixApi->ProductConfiguratorGetMatrix");
            }

            // verify the required parameter 'matrixId' is set
            if (matrixId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'matrixId' when calling MatrixApi->ProductConfiguratorGetMatrix");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("matrixId", productconfigurator.Client.ClientUtils.ParameterToString(matrixId)); // path parameter

            localVarRequestOptions.Operation = "MatrixApi.ProductConfiguratorGetMatrix";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductconfiguratormatrixEntity>("/v1/{tenantId}/matrix/{matrixId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorGetMatrix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Matrices Retrieve a list of matrices for a specific configurator based on tenant and configurator IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all matrices associated with the configurator. Streamline matrix management effortlessly.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatrixListMatricesResponse</returns>
        public MatrixListMatricesResponse ProductConfiguratorListMatrices(string tenantId, string configuratorId, string pageSize, ProductConfiguratorListMatricesRequest body, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<MatrixListMatricesResponse> localVarResponse = ProductConfiguratorListMatricesWithHttpInfo(tenantId, configuratorId, pageSize, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Matrices Retrieve a list of matrices for a specific configurator based on tenant and configurator IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all matrices associated with the configurator. Streamline matrix management effortlessly.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatrixListMatricesResponse</returns>
        public productconfigurator.Client.ApiResponse<MatrixListMatricesResponse> ProductConfiguratorListMatricesWithHttpInfo(string tenantId, string configuratorId, string pageSize, ProductConfiguratorListMatricesRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MatrixApi->ProductConfiguratorListMatrices");
            }

            // verify the required parameter 'configuratorId' is set
            if (configuratorId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'configuratorId' when calling MatrixApi->ProductConfiguratorListMatrices");
            }

            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'pageSize' when calling MatrixApi->ProductConfiguratorListMatrices");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling MatrixApi->ProductConfiguratorListMatrices");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("configuratorId", productconfigurator.Client.ClientUtils.ParameterToString(configuratorId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", productconfigurator.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MatrixApi.ProductConfiguratorListMatrices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MatrixListMatricesResponse>("/v1/{tenantId}/configurator/{configuratorId}/page-size/{pageSize}/matrices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorListMatrices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Matrices Retrieve a list of matrices for a specific configurator based on tenant and configurator IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all matrices associated with the configurator. Streamline matrix management effortlessly.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatrixListMatricesResponse</returns>
        public async System.Threading.Tasks.Task<MatrixListMatricesResponse> ProductConfiguratorListMatricesAsync(string tenantId, string configuratorId, string pageSize, ProductConfiguratorListMatricesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<MatrixListMatricesResponse> localVarResponse = await ProductConfiguratorListMatricesWithHttpInfoAsync(tenantId, configuratorId, pageSize, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Matrices Retrieve a list of matrices for a specific configurator based on tenant and configurator IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all matrices associated with the configurator. Streamline matrix management effortlessly.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatrixListMatricesResponse)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<MatrixListMatricesResponse>> ProductConfiguratorListMatricesWithHttpInfoAsync(string tenantId, string configuratorId, string pageSize, ProductConfiguratorListMatricesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MatrixApi->ProductConfiguratorListMatrices");
            }

            // verify the required parameter 'configuratorId' is set
            if (configuratorId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'configuratorId' when calling MatrixApi->ProductConfiguratorListMatrices");
            }

            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'pageSize' when calling MatrixApi->ProductConfiguratorListMatrices");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling MatrixApi->ProductConfiguratorListMatrices");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("configuratorId", productconfigurator.Client.ClientUtils.ParameterToString(configuratorId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", productconfigurator.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MatrixApi.ProductConfiguratorListMatrices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MatrixListMatricesResponse>("/v1/{tenantId}/configurator/{configuratorId}/page-size/{pageSize}/matrices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorListMatrices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Pricelist from Matrix Remove a specific pricelist from a matrix by specifying the tenant, matrix, and pricelist IDs. Use a DELETE request for precise management of pricelist configurations within your product configurator service.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="pricelistGrn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratormatrixEntity</returns>
        public ProductconfiguratormatrixEntity ProductConfiguratorRemovePricelistFromMatrix(string tenantId, string matrixId, string pricelistGrn, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratormatrixEntity> localVarResponse = ProductConfiguratorRemovePricelistFromMatrixWithHttpInfo(tenantId, matrixId, pricelistGrn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Pricelist from Matrix Remove a specific pricelist from a matrix by specifying the tenant, matrix, and pricelist IDs. Use a DELETE request for precise management of pricelist configurations within your product configurator service.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="pricelistGrn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratormatrixEntity</returns>
        public productconfigurator.Client.ApiResponse<ProductconfiguratormatrixEntity> ProductConfiguratorRemovePricelistFromMatrixWithHttpInfo(string tenantId, string matrixId, string pricelistGrn, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MatrixApi->ProductConfiguratorRemovePricelistFromMatrix");
            }

            // verify the required parameter 'matrixId' is set
            if (matrixId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'matrixId' when calling MatrixApi->ProductConfiguratorRemovePricelistFromMatrix");
            }

            // verify the required parameter 'pricelistGrn' is set
            if (pricelistGrn == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'pricelistGrn' when calling MatrixApi->ProductConfiguratorRemovePricelistFromMatrix");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("matrixId", productconfigurator.Client.ClientUtils.ParameterToString(matrixId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pricelistGrn", productconfigurator.Client.ClientUtils.ParameterToString(pricelistGrn)); // path parameter

            localVarRequestOptions.Operation = "MatrixApi.ProductConfiguratorRemovePricelistFromMatrix";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ProductconfiguratormatrixEntity>("/v1/{tenantId}/matrix/{matrixId}/pricelist/{pricelistGrn}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorRemovePricelistFromMatrix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Pricelist from Matrix Remove a specific pricelist from a matrix by specifying the tenant, matrix, and pricelist IDs. Use a DELETE request for precise management of pricelist configurations within your product configurator service.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="pricelistGrn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratormatrixEntity</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratormatrixEntity> ProductConfiguratorRemovePricelistFromMatrixAsync(string tenantId, string matrixId, string pricelistGrn, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratormatrixEntity> localVarResponse = await ProductConfiguratorRemovePricelistFromMatrixWithHttpInfoAsync(tenantId, matrixId, pricelistGrn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Pricelist from Matrix Remove a specific pricelist from a matrix by specifying the tenant, matrix, and pricelist IDs. Use a DELETE request for precise management of pricelist configurations within your product configurator service.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="pricelistGrn"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratormatrixEntity)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<ProductconfiguratormatrixEntity>> ProductConfiguratorRemovePricelistFromMatrixWithHttpInfoAsync(string tenantId, string matrixId, string pricelistGrn, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MatrixApi->ProductConfiguratorRemovePricelistFromMatrix");
            }

            // verify the required parameter 'matrixId' is set
            if (matrixId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'matrixId' when calling MatrixApi->ProductConfiguratorRemovePricelistFromMatrix");
            }

            // verify the required parameter 'pricelistGrn' is set
            if (pricelistGrn == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'pricelistGrn' when calling MatrixApi->ProductConfiguratorRemovePricelistFromMatrix");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("matrixId", productconfigurator.Client.ClientUtils.ParameterToString(matrixId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pricelistGrn", productconfigurator.Client.ClientUtils.ParameterToString(pricelistGrn)); // path parameter

            localVarRequestOptions.Operation = "MatrixApi.ProductConfiguratorRemovePricelistFromMatrix";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ProductconfiguratormatrixEntity>("/v1/{tenantId}/matrix/{matrixId}/pricelist/{pricelistGrn}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorRemovePricelistFromMatrix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Matrix Modify an existing matrix by specifying the tenant and matrix IDs. Utilize a PUT request with updated matrix details in the body for seamless customization and fine-tuning of your product configurations. Keep your matrices in sync effortlessly.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratormatrixEntity</returns>
        public ProductconfiguratormatrixEntity ProductConfiguratorUpdateMatrix(string tenantId, string matrixId, ProductConfiguratorUpdateMatrixRequest body, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratormatrixEntity> localVarResponse = ProductConfiguratorUpdateMatrixWithHttpInfo(tenantId, matrixId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Matrix Modify an existing matrix by specifying the tenant and matrix IDs. Utilize a PUT request with updated matrix details in the body for seamless customization and fine-tuning of your product configurations. Keep your matrices in sync effortlessly.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratormatrixEntity</returns>
        public productconfigurator.Client.ApiResponse<ProductconfiguratormatrixEntity> ProductConfiguratorUpdateMatrixWithHttpInfo(string tenantId, string matrixId, ProductConfiguratorUpdateMatrixRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MatrixApi->ProductConfiguratorUpdateMatrix");
            }

            // verify the required parameter 'matrixId' is set
            if (matrixId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'matrixId' when calling MatrixApi->ProductConfiguratorUpdateMatrix");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling MatrixApi->ProductConfiguratorUpdateMatrix");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("matrixId", productconfigurator.Client.ClientUtils.ParameterToString(matrixId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MatrixApi.ProductConfiguratorUpdateMatrix";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductconfiguratormatrixEntity>("/v1/{tenantId}/matrix/{matrixId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorUpdateMatrix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Matrix Modify an existing matrix by specifying the tenant and matrix IDs. Utilize a PUT request with updated matrix details in the body for seamless customization and fine-tuning of your product configurations. Keep your matrices in sync effortlessly.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratormatrixEntity</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratormatrixEntity> ProductConfiguratorUpdateMatrixAsync(string tenantId, string matrixId, ProductConfiguratorUpdateMatrixRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratormatrixEntity> localVarResponse = await ProductConfiguratorUpdateMatrixWithHttpInfoAsync(tenantId, matrixId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Matrix Modify an existing matrix by specifying the tenant and matrix IDs. Utilize a PUT request with updated matrix details in the body for seamless customization and fine-tuning of your product configurations. Keep your matrices in sync effortlessly.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratormatrixEntity)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<ProductconfiguratormatrixEntity>> ProductConfiguratorUpdateMatrixWithHttpInfoAsync(string tenantId, string matrixId, ProductConfiguratorUpdateMatrixRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MatrixApi->ProductConfiguratorUpdateMatrix");
            }

            // verify the required parameter 'matrixId' is set
            if (matrixId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'matrixId' when calling MatrixApi->ProductConfiguratorUpdateMatrix");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling MatrixApi->ProductConfiguratorUpdateMatrix");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("matrixId", productconfigurator.Client.ClientUtils.ParameterToString(matrixId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MatrixApi.ProductConfiguratorUpdateMatrix";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductconfiguratormatrixEntity>("/v1/{tenantId}/matrix/{matrixId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorUpdateMatrix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
