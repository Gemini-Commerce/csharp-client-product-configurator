/*
 * Product Configurator Service
 *
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using productconfigurator.Client;
using productconfigurator.Client.Auth;
using productconfigurator.Model;

namespace productconfigurator.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfiguratorApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Copy Configurator
        /// </summary>
        /// <remarks>
        /// Duplicate an existing product configurator from the source to the specified tenant and product. Submit an empty body to initiate the copy process, creating a new configuration based on the source.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="sourceConfiguratorId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratorconfiguratorEntity</returns>
        ProductconfiguratorconfiguratorEntity ProductConfiguratorCopyConfigurator(string tenantId, string sourceConfiguratorId, ProductConfiguratorCopyConfiguratorRequest body, int operationIndex = 0);

        /// <summary>
        /// Copy Configurator
        /// </summary>
        /// <remarks>
        /// Duplicate an existing product configurator from the source to the specified tenant and product. Submit an empty body to initiate the copy process, creating a new configuration based on the source.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="sourceConfiguratorId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratorconfiguratorEntity</returns>
        ApiResponse<ProductconfiguratorconfiguratorEntity> ProductConfiguratorCopyConfiguratorWithHttpInfo(string tenantId, string sourceConfiguratorId, ProductConfiguratorCopyConfiguratorRequest body, int operationIndex = 0);
        /// <summary>
        /// Create Configurator
        /// </summary>
        /// <remarks>
        /// Create a new product configurator for a specified tenant and product. Submit the desired configuration details in the request body to initiate the creation process.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratorconfiguratorEntity</returns>
        ProductconfiguratorconfiguratorEntity ProductConfiguratorCreateConfigurator(string tenantId, string productId, ProductConfiguratorCreateConfiguratorRequest body, int operationIndex = 0);

        /// <summary>
        /// Create Configurator
        /// </summary>
        /// <remarks>
        /// Create a new product configurator for a specified tenant and product. Submit the desired configuration details in the request body to initiate the creation process.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratorconfiguratorEntity</returns>
        ApiResponse<ProductconfiguratorconfiguratorEntity> ProductConfiguratorCreateConfiguratorWithHttpInfo(string tenantId, string productId, ProductConfiguratorCreateConfiguratorRequest body, int operationIndex = 0);
        /// <summary>
        /// Delete Configurator
        /// </summary>
        /// <remarks>
        /// Delete a product configurator by specifying the tenant and configurator IDs. Ensure precise removal of unwanted configurations with a straightforward DELETE request.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ProductConfiguratorDeleteConfigurator(string tenantId, string configuratorId, int operationIndex = 0);

        /// <summary>
        /// Delete Configurator
        /// </summary>
        /// <remarks>
        /// Delete a product configurator by specifying the tenant and configurator IDs. Ensure precise removal of unwanted configurations with a straightforward DELETE request.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ProductConfiguratorDeleteConfiguratorWithHttpInfo(string tenantId, string configuratorId, int operationIndex = 0);
        /// <summary>
        /// Get Configurator by Product ID
        /// </summary>
        /// <remarks>
        /// Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="status"> (optional, default to UNKNOWN)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratorconfiguratorEntity</returns>
        ProductconfiguratorconfiguratorEntity ProductConfiguratorGetConfiguratorByProductId(string tenantId, string productId, string? status = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Configurator by Product ID
        /// </summary>
        /// <remarks>
        /// Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="status"> (optional, default to UNKNOWN)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratorconfiguratorEntity</returns>
        ApiResponse<ProductconfiguratorconfiguratorEntity> ProductConfiguratorGetConfiguratorByProductIdWithHttpInfo(string tenantId, string productId, string? status = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Configurator by Product ID
        /// </summary>
        /// <remarks>
        /// Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="status"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratorconfiguratorEntity</returns>
        ProductconfiguratorconfiguratorEntity ProductConfiguratorGetConfiguratorByProductId2(string tenantId, string productId, string status, int operationIndex = 0);

        /// <summary>
        /// Get Configurator by Product ID
        /// </summary>
        /// <remarks>
        /// Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="status"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratorconfiguratorEntity</returns>
        ApiResponse<ProductconfiguratorconfiguratorEntity> ProductConfiguratorGetConfiguratorByProductId2WithHttpInfo(string tenantId, string productId, string status, int operationIndex = 0);
        /// <summary>
        /// List Product Configurators
        /// </summary>
        /// <remarks>
        /// List all product configurators.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfiguratorListResponse</returns>
        ConfiguratorListResponse ProductConfiguratorListConfigurators(string tenantId, string productId, long pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0);

        /// <summary>
        /// List Product Configurators
        /// </summary>
        /// <remarks>
        /// List all product configurators.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfiguratorListResponse</returns>
        ApiResponse<ConfiguratorListResponse> ProductConfiguratorListConfiguratorsWithHttpInfo(string tenantId, string productId, long pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0);
        /// <summary>
        /// Update Configurator
        /// </summary>
        /// <remarks>
        /// Modify an existing product configurator by specifying the tenant and configurator IDs. Use a PUT request with the updated configuration details in the body to seamlessly update and manage product configurations
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratorconfiguratorEntity</returns>
        ProductconfiguratorconfiguratorEntity ProductConfiguratorUpdateConfigurator(string tenantId, string configuratorId, ProductConfiguratorUpdateConfiguratorRequest body, int operationIndex = 0);

        /// <summary>
        /// Update Configurator
        /// </summary>
        /// <remarks>
        /// Modify an existing product configurator by specifying the tenant and configurator IDs. Use a PUT request with the updated configuration details in the body to seamlessly update and manage product configurations
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratorconfiguratorEntity</returns>
        ApiResponse<ProductconfiguratorconfiguratorEntity> ProductConfiguratorUpdateConfiguratorWithHttpInfo(string tenantId, string configuratorId, ProductConfiguratorUpdateConfiguratorRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfiguratorApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Copy Configurator
        /// </summary>
        /// <remarks>
        /// Duplicate an existing product configurator from the source to the specified tenant and product. Submit an empty body to initiate the copy process, creating a new configuration based on the source.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="sourceConfiguratorId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratorconfiguratorEntity</returns>
        System.Threading.Tasks.Task<ProductconfiguratorconfiguratorEntity> ProductConfiguratorCopyConfiguratorAsync(string tenantId, string sourceConfiguratorId, ProductConfiguratorCopyConfiguratorRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Copy Configurator
        /// </summary>
        /// <remarks>
        /// Duplicate an existing product configurator from the source to the specified tenant and product. Submit an empty body to initiate the copy process, creating a new configuration based on the source.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="sourceConfiguratorId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratorconfiguratorEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratorconfiguratorEntity>> ProductConfiguratorCopyConfiguratorWithHttpInfoAsync(string tenantId, string sourceConfiguratorId, ProductConfiguratorCopyConfiguratorRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Configurator
        /// </summary>
        /// <remarks>
        /// Create a new product configurator for a specified tenant and product. Submit the desired configuration details in the request body to initiate the creation process.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratorconfiguratorEntity</returns>
        System.Threading.Tasks.Task<ProductconfiguratorconfiguratorEntity> ProductConfiguratorCreateConfiguratorAsync(string tenantId, string productId, ProductConfiguratorCreateConfiguratorRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Configurator
        /// </summary>
        /// <remarks>
        /// Create a new product configurator for a specified tenant and product. Submit the desired configuration details in the request body to initiate the creation process.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratorconfiguratorEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratorconfiguratorEntity>> ProductConfiguratorCreateConfiguratorWithHttpInfoAsync(string tenantId, string productId, ProductConfiguratorCreateConfiguratorRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Configurator
        /// </summary>
        /// <remarks>
        /// Delete a product configurator by specifying the tenant and configurator IDs. Ensure precise removal of unwanted configurations with a straightforward DELETE request.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ProductConfiguratorDeleteConfiguratorAsync(string tenantId, string configuratorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Configurator
        /// </summary>
        /// <remarks>
        /// Delete a product configurator by specifying the tenant and configurator IDs. Ensure precise removal of unwanted configurations with a straightforward DELETE request.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductConfiguratorDeleteConfiguratorWithHttpInfoAsync(string tenantId, string configuratorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Configurator by Product ID
        /// </summary>
        /// <remarks>
        /// Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="status"> (optional, default to UNKNOWN)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratorconfiguratorEntity</returns>
        System.Threading.Tasks.Task<ProductconfiguratorconfiguratorEntity> ProductConfiguratorGetConfiguratorByProductIdAsync(string tenantId, string productId, string? status = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Configurator by Product ID
        /// </summary>
        /// <remarks>
        /// Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="status"> (optional, default to UNKNOWN)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratorconfiguratorEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratorconfiguratorEntity>> ProductConfiguratorGetConfiguratorByProductIdWithHttpInfoAsync(string tenantId, string productId, string? status = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Configurator by Product ID
        /// </summary>
        /// <remarks>
        /// Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="status"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratorconfiguratorEntity</returns>
        System.Threading.Tasks.Task<ProductconfiguratorconfiguratorEntity> ProductConfiguratorGetConfiguratorByProductId2Async(string tenantId, string productId, string status, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Configurator by Product ID
        /// </summary>
        /// <remarks>
        /// Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="status"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratorconfiguratorEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratorconfiguratorEntity>> ProductConfiguratorGetConfiguratorByProductId2WithHttpInfoAsync(string tenantId, string productId, string status, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Product Configurators
        /// </summary>
        /// <remarks>
        /// List all product configurators.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfiguratorListResponse</returns>
        System.Threading.Tasks.Task<ConfiguratorListResponse> ProductConfiguratorListConfiguratorsAsync(string tenantId, string productId, long pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Product Configurators
        /// </summary>
        /// <remarks>
        /// List all product configurators.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfiguratorListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfiguratorListResponse>> ProductConfiguratorListConfiguratorsWithHttpInfoAsync(string tenantId, string productId, long pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Configurator
        /// </summary>
        /// <remarks>
        /// Modify an existing product configurator by specifying the tenant and configurator IDs. Use a PUT request with the updated configuration details in the body to seamlessly update and manage product configurations
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratorconfiguratorEntity</returns>
        System.Threading.Tasks.Task<ProductconfiguratorconfiguratorEntity> ProductConfiguratorUpdateConfiguratorAsync(string tenantId, string configuratorId, ProductConfiguratorUpdateConfiguratorRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Configurator
        /// </summary>
        /// <remarks>
        /// Modify an existing product configurator by specifying the tenant and configurator IDs. Use a PUT request with the updated configuration details in the body to seamlessly update and manage product configurations
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratorconfiguratorEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratorconfiguratorEntity>> ProductConfiguratorUpdateConfiguratorWithHttpInfoAsync(string tenantId, string configuratorId, ProductConfiguratorUpdateConfiguratorRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfiguratorApi : IConfiguratorApiSync, IConfiguratorApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConfiguratorApi : IConfiguratorApi
    {
        private productconfigurator.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfiguratorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfiguratorApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfiguratorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfiguratorApi(string basePath)
        {
            this.Configuration = productconfigurator.Client.Configuration.MergeConfigurations(
                productconfigurator.Client.GlobalConfiguration.Instance,
                new productconfigurator.Client.Configuration { BasePath = basePath }
            );
            this.Client = new productconfigurator.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new productconfigurator.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = productconfigurator.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfiguratorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConfiguratorApi(productconfigurator.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = productconfigurator.Client.Configuration.MergeConfigurations(
                productconfigurator.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new productconfigurator.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new productconfigurator.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = productconfigurator.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfiguratorApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConfiguratorApi(productconfigurator.Client.ISynchronousClient client, productconfigurator.Client.IAsynchronousClient asyncClient, productconfigurator.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = productconfigurator.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public productconfigurator.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public productconfigurator.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public productconfigurator.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public productconfigurator.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Copy Configurator Duplicate an existing product configurator from the source to the specified tenant and product. Submit an empty body to initiate the copy process, creating a new configuration based on the source.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="sourceConfiguratorId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratorconfiguratorEntity</returns>
        public ProductconfiguratorconfiguratorEntity ProductConfiguratorCopyConfigurator(string tenantId, string sourceConfiguratorId, ProductConfiguratorCopyConfiguratorRequest body, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity> localVarResponse = ProductConfiguratorCopyConfiguratorWithHttpInfo(tenantId, sourceConfiguratorId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy Configurator Duplicate an existing product configurator from the source to the specified tenant and product. Submit an empty body to initiate the copy process, creating a new configuration based on the source.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="sourceConfiguratorId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratorconfiguratorEntity</returns>
        public productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity> ProductConfiguratorCopyConfiguratorWithHttpInfo(string tenantId, string sourceConfiguratorId, ProductConfiguratorCopyConfiguratorRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ConfiguratorApi->ProductConfiguratorCopyConfigurator");
            }

            // verify the required parameter 'sourceConfiguratorId' is set
            if (sourceConfiguratorId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'sourceConfiguratorId' when calling ConfiguratorApi->ProductConfiguratorCopyConfigurator");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling ConfiguratorApi->ProductConfiguratorCopyConfigurator");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceConfiguratorId", productconfigurator.Client.ClientUtils.ParameterToString(sourceConfiguratorId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ConfiguratorApi.ProductConfiguratorCopyConfigurator";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductconfiguratorconfiguratorEntity>("/v1/{tenantId}/product/{sourceConfiguratorId}/copy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorCopyConfigurator", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy Configurator Duplicate an existing product configurator from the source to the specified tenant and product. Submit an empty body to initiate the copy process, creating a new configuration based on the source.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="sourceConfiguratorId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratorconfiguratorEntity</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratorconfiguratorEntity> ProductConfiguratorCopyConfiguratorAsync(string tenantId, string sourceConfiguratorId, ProductConfiguratorCopyConfiguratorRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity> localVarResponse = await ProductConfiguratorCopyConfiguratorWithHttpInfoAsync(tenantId, sourceConfiguratorId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy Configurator Duplicate an existing product configurator from the source to the specified tenant and product. Submit an empty body to initiate the copy process, creating a new configuration based on the source.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="sourceConfiguratorId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratorconfiguratorEntity)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity>> ProductConfiguratorCopyConfiguratorWithHttpInfoAsync(string tenantId, string sourceConfiguratorId, ProductConfiguratorCopyConfiguratorRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ConfiguratorApi->ProductConfiguratorCopyConfigurator");
            }

            // verify the required parameter 'sourceConfiguratorId' is set
            if (sourceConfiguratorId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'sourceConfiguratorId' when calling ConfiguratorApi->ProductConfiguratorCopyConfigurator");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling ConfiguratorApi->ProductConfiguratorCopyConfigurator");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceConfiguratorId", productconfigurator.Client.ClientUtils.ParameterToString(sourceConfiguratorId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ConfiguratorApi.ProductConfiguratorCopyConfigurator";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductconfiguratorconfiguratorEntity>("/v1/{tenantId}/product/{sourceConfiguratorId}/copy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorCopyConfigurator", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Configurator Create a new product configurator for a specified tenant and product. Submit the desired configuration details in the request body to initiate the creation process.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratorconfiguratorEntity</returns>
        public ProductconfiguratorconfiguratorEntity ProductConfiguratorCreateConfigurator(string tenantId, string productId, ProductConfiguratorCreateConfiguratorRequest body, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity> localVarResponse = ProductConfiguratorCreateConfiguratorWithHttpInfo(tenantId, productId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Configurator Create a new product configurator for a specified tenant and product. Submit the desired configuration details in the request body to initiate the creation process.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratorconfiguratorEntity</returns>
        public productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity> ProductConfiguratorCreateConfiguratorWithHttpInfo(string tenantId, string productId, ProductConfiguratorCreateConfiguratorRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ConfiguratorApi->ProductConfiguratorCreateConfigurator");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'productId' when calling ConfiguratorApi->ProductConfiguratorCreateConfigurator");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling ConfiguratorApi->ProductConfiguratorCreateConfigurator");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("productId", productconfigurator.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ConfiguratorApi.ProductConfiguratorCreateConfigurator";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductconfiguratorconfiguratorEntity>("/v1/{tenantId}/product/{productId}/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorCreateConfigurator", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Configurator Create a new product configurator for a specified tenant and product. Submit the desired configuration details in the request body to initiate the creation process.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratorconfiguratorEntity</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratorconfiguratorEntity> ProductConfiguratorCreateConfiguratorAsync(string tenantId, string productId, ProductConfiguratorCreateConfiguratorRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity> localVarResponse = await ProductConfiguratorCreateConfiguratorWithHttpInfoAsync(tenantId, productId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Configurator Create a new product configurator for a specified tenant and product. Submit the desired configuration details in the request body to initiate the creation process.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratorconfiguratorEntity)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity>> ProductConfiguratorCreateConfiguratorWithHttpInfoAsync(string tenantId, string productId, ProductConfiguratorCreateConfiguratorRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ConfiguratorApi->ProductConfiguratorCreateConfigurator");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'productId' when calling ConfiguratorApi->ProductConfiguratorCreateConfigurator");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling ConfiguratorApi->ProductConfiguratorCreateConfigurator");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("productId", productconfigurator.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ConfiguratorApi.ProductConfiguratorCreateConfigurator";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductconfiguratorconfiguratorEntity>("/v1/{tenantId}/product/{productId}/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorCreateConfigurator", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Configurator Delete a product configurator by specifying the tenant and configurator IDs. Ensure precise removal of unwanted configurations with a straightforward DELETE request.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ProductConfiguratorDeleteConfigurator(string tenantId, string configuratorId, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<Object> localVarResponse = ProductConfiguratorDeleteConfiguratorWithHttpInfo(tenantId, configuratorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Configurator Delete a product configurator by specifying the tenant and configurator IDs. Ensure precise removal of unwanted configurations with a straightforward DELETE request.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public productconfigurator.Client.ApiResponse<Object> ProductConfiguratorDeleteConfiguratorWithHttpInfo(string tenantId, string configuratorId, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ConfiguratorApi->ProductConfiguratorDeleteConfigurator");
            }

            // verify the required parameter 'configuratorId' is set
            if (configuratorId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'configuratorId' when calling ConfiguratorApi->ProductConfiguratorDeleteConfigurator");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("configuratorId", productconfigurator.Client.ClientUtils.ParameterToString(configuratorId)); // path parameter

            localVarRequestOptions.Operation = "ConfiguratorApi.ProductConfiguratorDeleteConfigurator";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/{tenantId}/configurator/{configuratorId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorDeleteConfigurator", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Configurator Delete a product configurator by specifying the tenant and configurator IDs. Ensure precise removal of unwanted configurations with a straightforward DELETE request.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ProductConfiguratorDeleteConfiguratorAsync(string tenantId, string configuratorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<Object> localVarResponse = await ProductConfiguratorDeleteConfiguratorWithHttpInfoAsync(tenantId, configuratorId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Configurator Delete a product configurator by specifying the tenant and configurator IDs. Ensure precise removal of unwanted configurations with a straightforward DELETE request.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<Object>> ProductConfiguratorDeleteConfiguratorWithHttpInfoAsync(string tenantId, string configuratorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ConfiguratorApi->ProductConfiguratorDeleteConfigurator");
            }

            // verify the required parameter 'configuratorId' is set
            if (configuratorId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'configuratorId' when calling ConfiguratorApi->ProductConfiguratorDeleteConfigurator");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("configuratorId", productconfigurator.Client.ClientUtils.ParameterToString(configuratorId)); // path parameter

            localVarRequestOptions.Operation = "ConfiguratorApi.ProductConfiguratorDeleteConfigurator";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/{tenantId}/configurator/{configuratorId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorDeleteConfigurator", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Configurator by Product ID Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="status"> (optional, default to UNKNOWN)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratorconfiguratorEntity</returns>
        public ProductconfiguratorconfiguratorEntity ProductConfiguratorGetConfiguratorByProductId(string tenantId, string productId, string? status = default(string?), int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity> localVarResponse = ProductConfiguratorGetConfiguratorByProductIdWithHttpInfo(tenantId, productId, status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Configurator by Product ID Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="status"> (optional, default to UNKNOWN)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratorconfiguratorEntity</returns>
        public productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity> ProductConfiguratorGetConfiguratorByProductIdWithHttpInfo(string tenantId, string productId, string? status = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ConfiguratorApi->ProductConfiguratorGetConfiguratorByProductId");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'productId' when calling ConfiguratorApi->ProductConfiguratorGetConfiguratorByProductId");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("productId", productconfigurator.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(productconfigurator.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            localVarRequestOptions.Operation = "ConfiguratorApi.ProductConfiguratorGetConfiguratorByProductId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductconfiguratorconfiguratorEntity>("/v1/{tenantId}/product/{productId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorGetConfiguratorByProductId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Configurator by Product ID Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="status"> (optional, default to UNKNOWN)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratorconfiguratorEntity</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratorconfiguratorEntity> ProductConfiguratorGetConfiguratorByProductIdAsync(string tenantId, string productId, string? status = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity> localVarResponse = await ProductConfiguratorGetConfiguratorByProductIdWithHttpInfoAsync(tenantId, productId, status, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Configurator by Product ID Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="status"> (optional, default to UNKNOWN)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratorconfiguratorEntity)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity>> ProductConfiguratorGetConfiguratorByProductIdWithHttpInfoAsync(string tenantId, string productId, string? status = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ConfiguratorApi->ProductConfiguratorGetConfiguratorByProductId");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'productId' when calling ConfiguratorApi->ProductConfiguratorGetConfiguratorByProductId");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("productId", productconfigurator.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(productconfigurator.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            localVarRequestOptions.Operation = "ConfiguratorApi.ProductConfiguratorGetConfiguratorByProductId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductconfiguratorconfiguratorEntity>("/v1/{tenantId}/product/{productId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorGetConfiguratorByProductId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Configurator by Product ID Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="status"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratorconfiguratorEntity</returns>
        public ProductconfiguratorconfiguratorEntity ProductConfiguratorGetConfiguratorByProductId2(string tenantId, string productId, string status, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity> localVarResponse = ProductConfiguratorGetConfiguratorByProductId2WithHttpInfo(tenantId, productId, status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Configurator by Product ID Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="status"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratorconfiguratorEntity</returns>
        public productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity> ProductConfiguratorGetConfiguratorByProductId2WithHttpInfo(string tenantId, string productId, string status, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ConfiguratorApi->ProductConfiguratorGetConfiguratorByProductId2");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'productId' when calling ConfiguratorApi->ProductConfiguratorGetConfiguratorByProductId2");
            }

            // verify the required parameter 'status' is set
            if (status == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'status' when calling ConfiguratorApi->ProductConfiguratorGetConfiguratorByProductId2");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("productId", productconfigurator.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("status", productconfigurator.Client.ClientUtils.ParameterToString(status)); // path parameter

            localVarRequestOptions.Operation = "ConfiguratorApi.ProductConfiguratorGetConfiguratorByProductId2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductconfiguratorconfiguratorEntity>("/v1/{tenantId}/product/{productId}/status/{status}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorGetConfiguratorByProductId2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Configurator by Product ID Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="status"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratorconfiguratorEntity</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratorconfiguratorEntity> ProductConfiguratorGetConfiguratorByProductId2Async(string tenantId, string productId, string status, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity> localVarResponse = await ProductConfiguratorGetConfiguratorByProductId2WithHttpInfoAsync(tenantId, productId, status, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Configurator by Product ID Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="status"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratorconfiguratorEntity)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity>> ProductConfiguratorGetConfiguratorByProductId2WithHttpInfoAsync(string tenantId, string productId, string status, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ConfiguratorApi->ProductConfiguratorGetConfiguratorByProductId2");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'productId' when calling ConfiguratorApi->ProductConfiguratorGetConfiguratorByProductId2");
            }

            // verify the required parameter 'status' is set
            if (status == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'status' when calling ConfiguratorApi->ProductConfiguratorGetConfiguratorByProductId2");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("productId", productconfigurator.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("status", productconfigurator.Client.ClientUtils.ParameterToString(status)); // path parameter

            localVarRequestOptions.Operation = "ConfiguratorApi.ProductConfiguratorGetConfiguratorByProductId2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductconfiguratorconfiguratorEntity>("/v1/{tenantId}/product/{productId}/status/{status}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorGetConfiguratorByProductId2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Product Configurators List all product configurators.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfiguratorListResponse</returns>
        public ConfiguratorListResponse ProductConfiguratorListConfigurators(string tenantId, string productId, long pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<ConfiguratorListResponse> localVarResponse = ProductConfiguratorListConfiguratorsWithHttpInfo(tenantId, productId, pageSize, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Product Configurators List all product configurators.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfiguratorListResponse</returns>
        public productconfigurator.Client.ApiResponse<ConfiguratorListResponse> ProductConfiguratorListConfiguratorsWithHttpInfo(string tenantId, string productId, long pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ConfiguratorApi->ProductConfiguratorListConfigurators");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'productId' when calling ConfiguratorApi->ProductConfiguratorListConfigurators");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling ConfiguratorApi->ProductConfiguratorListConfigurators");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("productId", productconfigurator.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", productconfigurator.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ConfiguratorApi.ProductConfiguratorListConfigurators";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConfiguratorListResponse>("/v1/{tenantId}/product/{productId}/page-size/{pageSize}/configurators", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorListConfigurators", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Product Configurators List all product configurators.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfiguratorListResponse</returns>
        public async System.Threading.Tasks.Task<ConfiguratorListResponse> ProductConfiguratorListConfiguratorsAsync(string tenantId, string productId, long pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<ConfiguratorListResponse> localVarResponse = await ProductConfiguratorListConfiguratorsWithHttpInfoAsync(tenantId, productId, pageSize, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Product Configurators List all product configurators.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="productId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfiguratorListResponse)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<ConfiguratorListResponse>> ProductConfiguratorListConfiguratorsWithHttpInfoAsync(string tenantId, string productId, long pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ConfiguratorApi->ProductConfiguratorListConfigurators");
            }

            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'productId' when calling ConfiguratorApi->ProductConfiguratorListConfigurators");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling ConfiguratorApi->ProductConfiguratorListConfigurators");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("productId", productconfigurator.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", productconfigurator.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ConfiguratorApi.ProductConfiguratorListConfigurators";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConfiguratorListResponse>("/v1/{tenantId}/product/{productId}/page-size/{pageSize}/configurators", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorListConfigurators", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Configurator Modify an existing product configurator by specifying the tenant and configurator IDs. Use a PUT request with the updated configuration details in the body to seamlessly update and manage product configurations
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratorconfiguratorEntity</returns>
        public ProductconfiguratorconfiguratorEntity ProductConfiguratorUpdateConfigurator(string tenantId, string configuratorId, ProductConfiguratorUpdateConfiguratorRequest body, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity> localVarResponse = ProductConfiguratorUpdateConfiguratorWithHttpInfo(tenantId, configuratorId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Configurator Modify an existing product configurator by specifying the tenant and configurator IDs. Use a PUT request with the updated configuration details in the body to seamlessly update and manage product configurations
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratorconfiguratorEntity</returns>
        public productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity> ProductConfiguratorUpdateConfiguratorWithHttpInfo(string tenantId, string configuratorId, ProductConfiguratorUpdateConfiguratorRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ConfiguratorApi->ProductConfiguratorUpdateConfigurator");
            }

            // verify the required parameter 'configuratorId' is set
            if (configuratorId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'configuratorId' when calling ConfiguratorApi->ProductConfiguratorUpdateConfigurator");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling ConfiguratorApi->ProductConfiguratorUpdateConfigurator");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("configuratorId", productconfigurator.Client.ClientUtils.ParameterToString(configuratorId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ConfiguratorApi.ProductConfiguratorUpdateConfigurator";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductconfiguratorconfiguratorEntity>("/v1/{tenantId}/configurator/{configuratorId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorUpdateConfigurator", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Configurator Modify an existing product configurator by specifying the tenant and configurator IDs. Use a PUT request with the updated configuration details in the body to seamlessly update and manage product configurations
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratorconfiguratorEntity</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratorconfiguratorEntity> ProductConfiguratorUpdateConfiguratorAsync(string tenantId, string configuratorId, ProductConfiguratorUpdateConfiguratorRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity> localVarResponse = await ProductConfiguratorUpdateConfiguratorWithHttpInfoAsync(tenantId, configuratorId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Configurator Modify an existing product configurator by specifying the tenant and configurator IDs. Use a PUT request with the updated configuration details in the body to seamlessly update and manage product configurations
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="configuratorId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratorconfiguratorEntity)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<ProductconfiguratorconfiguratorEntity>> ProductConfiguratorUpdateConfiguratorWithHttpInfoAsync(string tenantId, string configuratorId, ProductConfiguratorUpdateConfiguratorRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling ConfiguratorApi->ProductConfiguratorUpdateConfigurator");
            }

            // verify the required parameter 'configuratorId' is set
            if (configuratorId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'configuratorId' when calling ConfiguratorApi->ProductConfiguratorUpdateConfigurator");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling ConfiguratorApi->ProductConfiguratorUpdateConfigurator");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("configuratorId", productconfigurator.Client.ClientUtils.ParameterToString(configuratorId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ConfiguratorApi.ProductConfiguratorUpdateConfigurator";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductconfiguratorconfiguratorEntity>("/v1/{tenantId}/configurator/{configuratorId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorUpdateConfigurator", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
