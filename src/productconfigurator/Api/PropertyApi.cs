/*
 * Product Configurator Service
 *
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using productconfigurator.Client;
using productconfigurator.Client.Auth;
using productconfigurator.Model;

namespace productconfigurator.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPropertyApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Bulk Create Properties
        /// </summary>
        /// <remarks>
        /// Efficiently add multiple properties to configurations with a bulk create operation. Specify the tenant ID and submit a POST request with the necessary property details in the body for streamlined property management.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratorpropertyBulkCreateResponse</returns>
        ProductconfiguratorpropertyBulkCreateResponse ProductConfiguratorBulkCreateProperties(string tenantId, ProductConfiguratorBulkCreatePropertiesRequest body, int operationIndex = 0);

        /// <summary>
        /// Bulk Create Properties
        /// </summary>
        /// <remarks>
        /// Efficiently add multiple properties to configurations with a bulk create operation. Specify the tenant ID and submit a POST request with the necessary property details in the body for streamlined property management.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratorpropertyBulkCreateResponse</returns>
        ApiResponse<ProductconfiguratorpropertyBulkCreateResponse> ProductConfiguratorBulkCreatePropertiesWithHttpInfo(string tenantId, ProductConfiguratorBulkCreatePropertiesRequest body, int operationIndex = 0);
        /// <summary>
        /// Bulk Update Properties
        /// </summary>
        /// <remarks>
        /// Effortlessly update multiple properties. Specify the tenant ID and submit a PUT request with the updated property details in the body. Streamline the customization of a multitude of properties in one go.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratorpropertyBulkUpdateResponse</returns>
        ProductconfiguratorpropertyBulkUpdateResponse ProductConfiguratorBulkUpdateProperties(string tenantId, ProductConfiguratorBulkUpdatePropertiesRequest body, int operationIndex = 0);

        /// <summary>
        /// Bulk Update Properties
        /// </summary>
        /// <remarks>
        /// Effortlessly update multiple properties. Specify the tenant ID and submit a PUT request with the updated property details in the body. Streamline the customization of a multitude of properties in one go.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratorpropertyBulkUpdateResponse</returns>
        ApiResponse<ProductconfiguratorpropertyBulkUpdateResponse> ProductConfiguratorBulkUpdatePropertiesWithHttpInfo(string tenantId, ProductConfiguratorBulkUpdatePropertiesRequest body, int operationIndex = 0);
        /// <summary>
        /// Create Property
        /// </summary>
        /// <remarks>
        /// Integrate a new property into configurations by specifying the tenant ID. Use a POST request with the required property details in the body for seamless customization and expansion of product configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratorpropertyEntity</returns>
        ProductconfiguratorpropertyEntity ProductConfiguratorCreateProperty(string tenantId, ProductConfiguratorCreatePropertyRequest body, int operationIndex = 0);

        /// <summary>
        /// Create Property
        /// </summary>
        /// <remarks>
        /// Integrate a new property into configurations by specifying the tenant ID. Use a POST request with the required property details in the body for seamless customization and expansion of product configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratorpropertyEntity</returns>
        ApiResponse<ProductconfiguratorpropertyEntity> ProductConfiguratorCreatePropertyWithHttpInfo(string tenantId, ProductConfiguratorCreatePropertyRequest body, int operationIndex = 0);
        /// <summary>
        /// List Properties
        /// </summary>
        /// <remarks>
        /// Retrieve a list of properties for a specific matrix based on tenant and matrix IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all properties associated with the matrix.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PropertyListPropertiesResponse</returns>
        PropertyListPropertiesResponse ProductConfiguratorListProperties(string tenantId, string matrixId, string pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0);

        /// <summary>
        /// List Properties
        /// </summary>
        /// <remarks>
        /// Retrieve a list of properties for a specific matrix based on tenant and matrix IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all properties associated with the matrix.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PropertyListPropertiesResponse</returns>
        ApiResponse<PropertyListPropertiesResponse> ProductConfiguratorListPropertiesWithHttpInfo(string tenantId, string matrixId, string pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0);
        /// <summary>
        /// Update Property
        /// </summary>
        /// <remarks>
        /// Modify an existing property by specifying the tenant and property IDs. Utilize a PUT request with updated property details in the body for seamless customization and fine-tuning of your product configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="propertyId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratorpropertyEntity</returns>
        ProductconfiguratorpropertyEntity ProductConfiguratorUpdateProperty(string tenantId, string propertyId, ProductConfiguratorUpdatePropertyRequest body, int operationIndex = 0);

        /// <summary>
        /// Update Property
        /// </summary>
        /// <remarks>
        /// Modify an existing property by specifying the tenant and property IDs. Utilize a PUT request with updated property details in the body for seamless customization and fine-tuning of your product configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="propertyId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratorpropertyEntity</returns>
        ApiResponse<ProductconfiguratorpropertyEntity> ProductConfiguratorUpdatePropertyWithHttpInfo(string tenantId, string propertyId, ProductConfiguratorUpdatePropertyRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPropertyApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Bulk Create Properties
        /// </summary>
        /// <remarks>
        /// Efficiently add multiple properties to configurations with a bulk create operation. Specify the tenant ID and submit a POST request with the necessary property details in the body for streamlined property management.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratorpropertyBulkCreateResponse</returns>
        System.Threading.Tasks.Task<ProductconfiguratorpropertyBulkCreateResponse> ProductConfiguratorBulkCreatePropertiesAsync(string tenantId, ProductConfiguratorBulkCreatePropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Bulk Create Properties
        /// </summary>
        /// <remarks>
        /// Efficiently add multiple properties to configurations with a bulk create operation. Specify the tenant ID and submit a POST request with the necessary property details in the body for streamlined property management.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratorpropertyBulkCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratorpropertyBulkCreateResponse>> ProductConfiguratorBulkCreatePropertiesWithHttpInfoAsync(string tenantId, ProductConfiguratorBulkCreatePropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Bulk Update Properties
        /// </summary>
        /// <remarks>
        /// Effortlessly update multiple properties. Specify the tenant ID and submit a PUT request with the updated property details in the body. Streamline the customization of a multitude of properties in one go.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratorpropertyBulkUpdateResponse</returns>
        System.Threading.Tasks.Task<ProductconfiguratorpropertyBulkUpdateResponse> ProductConfiguratorBulkUpdatePropertiesAsync(string tenantId, ProductConfiguratorBulkUpdatePropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Bulk Update Properties
        /// </summary>
        /// <remarks>
        /// Effortlessly update multiple properties. Specify the tenant ID and submit a PUT request with the updated property details in the body. Streamline the customization of a multitude of properties in one go.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratorpropertyBulkUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratorpropertyBulkUpdateResponse>> ProductConfiguratorBulkUpdatePropertiesWithHttpInfoAsync(string tenantId, ProductConfiguratorBulkUpdatePropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Property
        /// </summary>
        /// <remarks>
        /// Integrate a new property into configurations by specifying the tenant ID. Use a POST request with the required property details in the body for seamless customization and expansion of product configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratorpropertyEntity</returns>
        System.Threading.Tasks.Task<ProductconfiguratorpropertyEntity> ProductConfiguratorCreatePropertyAsync(string tenantId, ProductConfiguratorCreatePropertyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Property
        /// </summary>
        /// <remarks>
        /// Integrate a new property into configurations by specifying the tenant ID. Use a POST request with the required property details in the body for seamless customization and expansion of product configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratorpropertyEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratorpropertyEntity>> ProductConfiguratorCreatePropertyWithHttpInfoAsync(string tenantId, ProductConfiguratorCreatePropertyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Properties
        /// </summary>
        /// <remarks>
        /// Retrieve a list of properties for a specific matrix based on tenant and matrix IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all properties associated with the matrix.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertyListPropertiesResponse</returns>
        System.Threading.Tasks.Task<PropertyListPropertiesResponse> ProductConfiguratorListPropertiesAsync(string tenantId, string matrixId, string pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Properties
        /// </summary>
        /// <remarks>
        /// Retrieve a list of properties for a specific matrix based on tenant and matrix IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all properties associated with the matrix.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertyListPropertiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertyListPropertiesResponse>> ProductConfiguratorListPropertiesWithHttpInfoAsync(string tenantId, string matrixId, string pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Property
        /// </summary>
        /// <remarks>
        /// Modify an existing property by specifying the tenant and property IDs. Utilize a PUT request with updated property details in the body for seamless customization and fine-tuning of your product configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="propertyId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratorpropertyEntity</returns>
        System.Threading.Tasks.Task<ProductconfiguratorpropertyEntity> ProductConfiguratorUpdatePropertyAsync(string tenantId, string propertyId, ProductConfiguratorUpdatePropertyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Property
        /// </summary>
        /// <remarks>
        /// Modify an existing property by specifying the tenant and property IDs. Utilize a PUT request with updated property details in the body for seamless customization and fine-tuning of your product configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="propertyId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratorpropertyEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratorpropertyEntity>> ProductConfiguratorUpdatePropertyWithHttpInfoAsync(string tenantId, string propertyId, ProductConfiguratorUpdatePropertyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPropertyApi : IPropertyApiSync, IPropertyApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PropertyApi : IPropertyApi
    {
        private productconfigurator.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PropertyApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PropertyApi(string basePath)
        {
            this.Configuration = productconfigurator.Client.Configuration.MergeConfigurations(
                productconfigurator.Client.GlobalConfiguration.Instance,
                new productconfigurator.Client.Configuration { BasePath = basePath }
            );
            this.Client = new productconfigurator.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new productconfigurator.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = productconfigurator.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PropertyApi(productconfigurator.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = productconfigurator.Client.Configuration.MergeConfigurations(
                productconfigurator.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new productconfigurator.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new productconfigurator.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = productconfigurator.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PropertyApi(productconfigurator.Client.ISynchronousClient client, productconfigurator.Client.IAsynchronousClient asyncClient, productconfigurator.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = productconfigurator.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public productconfigurator.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public productconfigurator.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public productconfigurator.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public productconfigurator.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Bulk Create Properties Efficiently add multiple properties to configurations with a bulk create operation. Specify the tenant ID and submit a POST request with the necessary property details in the body for streamlined property management.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratorpropertyBulkCreateResponse</returns>
        public ProductconfiguratorpropertyBulkCreateResponse ProductConfiguratorBulkCreateProperties(string tenantId, ProductConfiguratorBulkCreatePropertiesRequest body, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratorpropertyBulkCreateResponse> localVarResponse = ProductConfiguratorBulkCreatePropertiesWithHttpInfo(tenantId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Create Properties Efficiently add multiple properties to configurations with a bulk create operation. Specify the tenant ID and submit a POST request with the necessary property details in the body for streamlined property management.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratorpropertyBulkCreateResponse</returns>
        public productconfigurator.Client.ApiResponse<ProductconfiguratorpropertyBulkCreateResponse> ProductConfiguratorBulkCreatePropertiesWithHttpInfo(string tenantId, ProductConfiguratorBulkCreatePropertiesRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling PropertyApi->ProductConfiguratorBulkCreateProperties");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling PropertyApi->ProductConfiguratorBulkCreateProperties");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PropertyApi.ProductConfiguratorBulkCreateProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductconfiguratorpropertyBulkCreateResponse>("/v1/{tenantId}/property/create/bulk", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorBulkCreateProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Bulk Create Properties Efficiently add multiple properties to configurations with a bulk create operation. Specify the tenant ID and submit a POST request with the necessary property details in the body for streamlined property management.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratorpropertyBulkCreateResponse</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratorpropertyBulkCreateResponse> ProductConfiguratorBulkCreatePropertiesAsync(string tenantId, ProductConfiguratorBulkCreatePropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratorpropertyBulkCreateResponse> localVarResponse = await ProductConfiguratorBulkCreatePropertiesWithHttpInfoAsync(tenantId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Create Properties Efficiently add multiple properties to configurations with a bulk create operation. Specify the tenant ID and submit a POST request with the necessary property details in the body for streamlined property management.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratorpropertyBulkCreateResponse)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<ProductconfiguratorpropertyBulkCreateResponse>> ProductConfiguratorBulkCreatePropertiesWithHttpInfoAsync(string tenantId, ProductConfiguratorBulkCreatePropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling PropertyApi->ProductConfiguratorBulkCreateProperties");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling PropertyApi->ProductConfiguratorBulkCreateProperties");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PropertyApi.ProductConfiguratorBulkCreateProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductconfiguratorpropertyBulkCreateResponse>("/v1/{tenantId}/property/create/bulk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorBulkCreateProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Bulk Update Properties Effortlessly update multiple properties. Specify the tenant ID and submit a PUT request with the updated property details in the body. Streamline the customization of a multitude of properties in one go.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratorpropertyBulkUpdateResponse</returns>
        public ProductconfiguratorpropertyBulkUpdateResponse ProductConfiguratorBulkUpdateProperties(string tenantId, ProductConfiguratorBulkUpdatePropertiesRequest body, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratorpropertyBulkUpdateResponse> localVarResponse = ProductConfiguratorBulkUpdatePropertiesWithHttpInfo(tenantId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Update Properties Effortlessly update multiple properties. Specify the tenant ID and submit a PUT request with the updated property details in the body. Streamline the customization of a multitude of properties in one go.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratorpropertyBulkUpdateResponse</returns>
        public productconfigurator.Client.ApiResponse<ProductconfiguratorpropertyBulkUpdateResponse> ProductConfiguratorBulkUpdatePropertiesWithHttpInfo(string tenantId, ProductConfiguratorBulkUpdatePropertiesRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling PropertyApi->ProductConfiguratorBulkUpdateProperties");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling PropertyApi->ProductConfiguratorBulkUpdateProperties");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PropertyApi.ProductConfiguratorBulkUpdateProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductconfiguratorpropertyBulkUpdateResponse>("/v1/{tenantId}/properties/bulk", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorBulkUpdateProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Bulk Update Properties Effortlessly update multiple properties. Specify the tenant ID and submit a PUT request with the updated property details in the body. Streamline the customization of a multitude of properties in one go.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratorpropertyBulkUpdateResponse</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratorpropertyBulkUpdateResponse> ProductConfiguratorBulkUpdatePropertiesAsync(string tenantId, ProductConfiguratorBulkUpdatePropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratorpropertyBulkUpdateResponse> localVarResponse = await ProductConfiguratorBulkUpdatePropertiesWithHttpInfoAsync(tenantId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Update Properties Effortlessly update multiple properties. Specify the tenant ID and submit a PUT request with the updated property details in the body. Streamline the customization of a multitude of properties in one go.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratorpropertyBulkUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<ProductconfiguratorpropertyBulkUpdateResponse>> ProductConfiguratorBulkUpdatePropertiesWithHttpInfoAsync(string tenantId, ProductConfiguratorBulkUpdatePropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling PropertyApi->ProductConfiguratorBulkUpdateProperties");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling PropertyApi->ProductConfiguratorBulkUpdateProperties");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PropertyApi.ProductConfiguratorBulkUpdateProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductconfiguratorpropertyBulkUpdateResponse>("/v1/{tenantId}/properties/bulk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorBulkUpdateProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Property Integrate a new property into configurations by specifying the tenant ID. Use a POST request with the required property details in the body for seamless customization and expansion of product configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratorpropertyEntity</returns>
        public ProductconfiguratorpropertyEntity ProductConfiguratorCreateProperty(string tenantId, ProductConfiguratorCreatePropertyRequest body, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratorpropertyEntity> localVarResponse = ProductConfiguratorCreatePropertyWithHttpInfo(tenantId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Property Integrate a new property into configurations by specifying the tenant ID. Use a POST request with the required property details in the body for seamless customization and expansion of product configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratorpropertyEntity</returns>
        public productconfigurator.Client.ApiResponse<ProductconfiguratorpropertyEntity> ProductConfiguratorCreatePropertyWithHttpInfo(string tenantId, ProductConfiguratorCreatePropertyRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling PropertyApi->ProductConfiguratorCreateProperty");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling PropertyApi->ProductConfiguratorCreateProperty");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PropertyApi.ProductConfiguratorCreateProperty";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductconfiguratorpropertyEntity>("/v1/{tenantId}/property/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorCreateProperty", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Property Integrate a new property into configurations by specifying the tenant ID. Use a POST request with the required property details in the body for seamless customization and expansion of product configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratorpropertyEntity</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratorpropertyEntity> ProductConfiguratorCreatePropertyAsync(string tenantId, ProductConfiguratorCreatePropertyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratorpropertyEntity> localVarResponse = await ProductConfiguratorCreatePropertyWithHttpInfoAsync(tenantId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Property Integrate a new property into configurations by specifying the tenant ID. Use a POST request with the required property details in the body for seamless customization and expansion of product configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratorpropertyEntity)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<ProductconfiguratorpropertyEntity>> ProductConfiguratorCreatePropertyWithHttpInfoAsync(string tenantId, ProductConfiguratorCreatePropertyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling PropertyApi->ProductConfiguratorCreateProperty");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling PropertyApi->ProductConfiguratorCreateProperty");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PropertyApi.ProductConfiguratorCreateProperty";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductconfiguratorpropertyEntity>("/v1/{tenantId}/property/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorCreateProperty", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Properties Retrieve a list of properties for a specific matrix based on tenant and matrix IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all properties associated with the matrix.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PropertyListPropertiesResponse</returns>
        public PropertyListPropertiesResponse ProductConfiguratorListProperties(string tenantId, string matrixId, string pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<PropertyListPropertiesResponse> localVarResponse = ProductConfiguratorListPropertiesWithHttpInfo(tenantId, matrixId, pageSize, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Properties Retrieve a list of properties for a specific matrix based on tenant and matrix IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all properties associated with the matrix.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PropertyListPropertiesResponse</returns>
        public productconfigurator.Client.ApiResponse<PropertyListPropertiesResponse> ProductConfiguratorListPropertiesWithHttpInfo(string tenantId, string matrixId, string pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling PropertyApi->ProductConfiguratorListProperties");
            }

            // verify the required parameter 'matrixId' is set
            if (matrixId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'matrixId' when calling PropertyApi->ProductConfiguratorListProperties");
            }

            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'pageSize' when calling PropertyApi->ProductConfiguratorListProperties");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling PropertyApi->ProductConfiguratorListProperties");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("matrixId", productconfigurator.Client.ClientUtils.ParameterToString(matrixId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", productconfigurator.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PropertyApi.ProductConfiguratorListProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PropertyListPropertiesResponse>("/v1/{tenantId}/matrix/{matrixId}/page-size/{pageSize}/properties", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorListProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Properties Retrieve a list of properties for a specific matrix based on tenant and matrix IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all properties associated with the matrix.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertyListPropertiesResponse</returns>
        public async System.Threading.Tasks.Task<PropertyListPropertiesResponse> ProductConfiguratorListPropertiesAsync(string tenantId, string matrixId, string pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<PropertyListPropertiesResponse> localVarResponse = await ProductConfiguratorListPropertiesWithHttpInfoAsync(tenantId, matrixId, pageSize, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Properties Retrieve a list of properties for a specific matrix based on tenant and matrix IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all properties associated with the matrix.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="matrixId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertyListPropertiesResponse)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<PropertyListPropertiesResponse>> ProductConfiguratorListPropertiesWithHttpInfoAsync(string tenantId, string matrixId, string pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling PropertyApi->ProductConfiguratorListProperties");
            }

            // verify the required parameter 'matrixId' is set
            if (matrixId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'matrixId' when calling PropertyApi->ProductConfiguratorListProperties");
            }

            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'pageSize' when calling PropertyApi->ProductConfiguratorListProperties");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling PropertyApi->ProductConfiguratorListProperties");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("matrixId", productconfigurator.Client.ClientUtils.ParameterToString(matrixId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", productconfigurator.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PropertyApi.ProductConfiguratorListProperties";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PropertyListPropertiesResponse>("/v1/{tenantId}/matrix/{matrixId}/page-size/{pageSize}/properties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorListProperties", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Property Modify an existing property by specifying the tenant and property IDs. Utilize a PUT request with updated property details in the body for seamless customization and fine-tuning of your product configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="propertyId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratorpropertyEntity</returns>
        public ProductconfiguratorpropertyEntity ProductConfiguratorUpdateProperty(string tenantId, string propertyId, ProductConfiguratorUpdatePropertyRequest body, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratorpropertyEntity> localVarResponse = ProductConfiguratorUpdatePropertyWithHttpInfo(tenantId, propertyId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Property Modify an existing property by specifying the tenant and property IDs. Utilize a PUT request with updated property details in the body for seamless customization and fine-tuning of your product configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="propertyId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratorpropertyEntity</returns>
        public productconfigurator.Client.ApiResponse<ProductconfiguratorpropertyEntity> ProductConfiguratorUpdatePropertyWithHttpInfo(string tenantId, string propertyId, ProductConfiguratorUpdatePropertyRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling PropertyApi->ProductConfiguratorUpdateProperty");
            }

            // verify the required parameter 'propertyId' is set
            if (propertyId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'propertyId' when calling PropertyApi->ProductConfiguratorUpdateProperty");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling PropertyApi->ProductConfiguratorUpdateProperty");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("propertyId", productconfigurator.Client.ClientUtils.ParameterToString(propertyId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PropertyApi.ProductConfiguratorUpdateProperty";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductconfiguratorpropertyEntity>("/v1/{tenantId}/property/{propertyId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorUpdateProperty", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Property Modify an existing property by specifying the tenant and property IDs. Utilize a PUT request with updated property details in the body for seamless customization and fine-tuning of your product configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="propertyId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratorpropertyEntity</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratorpropertyEntity> ProductConfiguratorUpdatePropertyAsync(string tenantId, string propertyId, ProductConfiguratorUpdatePropertyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratorpropertyEntity> localVarResponse = await ProductConfiguratorUpdatePropertyWithHttpInfoAsync(tenantId, propertyId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Property Modify an existing property by specifying the tenant and property IDs. Utilize a PUT request with updated property details in the body for seamless customization and fine-tuning of your product configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="propertyId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratorpropertyEntity)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<ProductconfiguratorpropertyEntity>> ProductConfiguratorUpdatePropertyWithHttpInfoAsync(string tenantId, string propertyId, ProductConfiguratorUpdatePropertyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling PropertyApi->ProductConfiguratorUpdateProperty");
            }

            // verify the required parameter 'propertyId' is set
            if (propertyId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'propertyId' when calling PropertyApi->ProductConfiguratorUpdateProperty");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling PropertyApi->ProductConfiguratorUpdateProperty");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("propertyId", productconfigurator.Client.ClientUtils.ParameterToString(propertyId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PropertyApi.ProductConfiguratorUpdateProperty";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductconfiguratorpropertyEntity>("/v1/{tenantId}/property/{propertyId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorUpdateProperty", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
