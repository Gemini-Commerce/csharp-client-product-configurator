/*
 * Product Configurator Service
 *
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using productconfigurator.Client;
using productconfigurator.Client.Auth;
using productconfigurator.Model;

namespace productconfigurator.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDependencyApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Dependency
        /// </summary>
        /// <remarks>
        /// Establish a new dependency for an existing step by specifying the tenant and step IDs. Utilize a POST request with the required dependency details in the body to seamlessly enhance the configuration logic of your product.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratordependencyEntity</returns>
        ProductconfiguratordependencyEntity ProductConfiguratorCreateDependency(string tenantId, string stepId, ProductConfiguratorCreateDependencyRequest body, int operationIndex = 0);

        /// <summary>
        /// Create Dependency
        /// </summary>
        /// <remarks>
        /// Establish a new dependency for an existing step by specifying the tenant and step IDs. Utilize a POST request with the required dependency details in the body to seamlessly enhance the configuration logic of your product.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratordependencyEntity</returns>
        ApiResponse<ProductconfiguratordependencyEntity> ProductConfiguratorCreateDependencyWithHttpInfo(string tenantId, string stepId, ProductConfiguratorCreateDependencyRequest body, int operationIndex = 0);
        /// <summary>
        /// Delete Dependency
        /// </summary>
        /// <remarks>
        /// Remove a specific dependency by specifying the tenant and dependency IDs. Ensure precision in dependency management with a straightforward DELETE request, simplifying the elimination of unwanted configuration logic.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="dependencyId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ProductConfiguratorDeleteDependency(string tenantId, string dependencyId, int operationIndex = 0);

        /// <summary>
        /// Delete Dependency
        /// </summary>
        /// <remarks>
        /// Remove a specific dependency by specifying the tenant and dependency IDs. Ensure precision in dependency management with a straightforward DELETE request, simplifying the elimination of unwanted configuration logic.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="dependencyId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ProductConfiguratorDeleteDependencyWithHttpInfo(string tenantId, string dependencyId, int operationIndex = 0);
        /// <summary>
        /// List Dependencies
        /// </summary>
        /// <remarks>
        /// Retrieve a list of dependencies based on the specified tenant ID. Customize results by specifying page size for efficient pagination. Submit an empty body to get all dependencies associated with the configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DependencyListDependenciesResponse</returns>
        DependencyListDependenciesResponse ProductConfiguratorListDependencies(string tenantId, long pageSize, ProductConfiguratorListDependenciesRequest body, int operationIndex = 0);

        /// <summary>
        /// List Dependencies
        /// </summary>
        /// <remarks>
        /// Retrieve a list of dependencies based on the specified tenant ID. Customize results by specifying page size for efficient pagination. Submit an empty body to get all dependencies associated with the configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DependencyListDependenciesResponse</returns>
        ApiResponse<DependencyListDependenciesResponse> ProductConfiguratorListDependenciesWithHttpInfo(string tenantId, long pageSize, ProductConfiguratorListDependenciesRequest body, int operationIndex = 0);
        /// <summary>
        /// Update Dependency
        /// </summary>
        /// <remarks>
        /// Modify an existing dependency by specifying the tenant and dependency IDs. Utilize a PUT request with updated dependency details in the body for seamless customization and fine-tuning of your product configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="dependencyId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratordependencyEntity</returns>
        ProductconfiguratordependencyEntity ProductConfiguratorUpdateDependency(string tenantId, string dependencyId, ProductConfiguratorUpdateDependencyRequest body, int operationIndex = 0);

        /// <summary>
        /// Update Dependency
        /// </summary>
        /// <remarks>
        /// Modify an existing dependency by specifying the tenant and dependency IDs. Utilize a PUT request with updated dependency details in the body for seamless customization and fine-tuning of your product configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="dependencyId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratordependencyEntity</returns>
        ApiResponse<ProductconfiguratordependencyEntity> ProductConfiguratorUpdateDependencyWithHttpInfo(string tenantId, string dependencyId, ProductConfiguratorUpdateDependencyRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDependencyApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Dependency
        /// </summary>
        /// <remarks>
        /// Establish a new dependency for an existing step by specifying the tenant and step IDs. Utilize a POST request with the required dependency details in the body to seamlessly enhance the configuration logic of your product.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratordependencyEntity</returns>
        System.Threading.Tasks.Task<ProductconfiguratordependencyEntity> ProductConfiguratorCreateDependencyAsync(string tenantId, string stepId, ProductConfiguratorCreateDependencyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Dependency
        /// </summary>
        /// <remarks>
        /// Establish a new dependency for an existing step by specifying the tenant and step IDs. Utilize a POST request with the required dependency details in the body to seamlessly enhance the configuration logic of your product.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratordependencyEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratordependencyEntity>> ProductConfiguratorCreateDependencyWithHttpInfoAsync(string tenantId, string stepId, ProductConfiguratorCreateDependencyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Dependency
        /// </summary>
        /// <remarks>
        /// Remove a specific dependency by specifying the tenant and dependency IDs. Ensure precision in dependency management with a straightforward DELETE request, simplifying the elimination of unwanted configuration logic.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="dependencyId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ProductConfiguratorDeleteDependencyAsync(string tenantId, string dependencyId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Dependency
        /// </summary>
        /// <remarks>
        /// Remove a specific dependency by specifying the tenant and dependency IDs. Ensure precision in dependency management with a straightforward DELETE request, simplifying the elimination of unwanted configuration logic.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="dependencyId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductConfiguratorDeleteDependencyWithHttpInfoAsync(string tenantId, string dependencyId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Dependencies
        /// </summary>
        /// <remarks>
        /// Retrieve a list of dependencies based on the specified tenant ID. Customize results by specifying page size for efficient pagination. Submit an empty body to get all dependencies associated with the configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DependencyListDependenciesResponse</returns>
        System.Threading.Tasks.Task<DependencyListDependenciesResponse> ProductConfiguratorListDependenciesAsync(string tenantId, long pageSize, ProductConfiguratorListDependenciesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Dependencies
        /// </summary>
        /// <remarks>
        /// Retrieve a list of dependencies based on the specified tenant ID. Customize results by specifying page size for efficient pagination. Submit an empty body to get all dependencies associated with the configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DependencyListDependenciesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DependencyListDependenciesResponse>> ProductConfiguratorListDependenciesWithHttpInfoAsync(string tenantId, long pageSize, ProductConfiguratorListDependenciesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Dependency
        /// </summary>
        /// <remarks>
        /// Modify an existing dependency by specifying the tenant and dependency IDs. Utilize a PUT request with updated dependency details in the body for seamless customization and fine-tuning of your product configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="dependencyId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratordependencyEntity</returns>
        System.Threading.Tasks.Task<ProductconfiguratordependencyEntity> ProductConfiguratorUpdateDependencyAsync(string tenantId, string dependencyId, ProductConfiguratorUpdateDependencyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Dependency
        /// </summary>
        /// <remarks>
        /// Modify an existing dependency by specifying the tenant and dependency IDs. Utilize a PUT request with updated dependency details in the body for seamless customization and fine-tuning of your product configurations.
        /// </remarks>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="dependencyId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratordependencyEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratordependencyEntity>> ProductConfiguratorUpdateDependencyWithHttpInfoAsync(string tenantId, string dependencyId, ProductConfiguratorUpdateDependencyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDependencyApi : IDependencyApiSync, IDependencyApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DependencyApi : IDependencyApi
    {
        private productconfigurator.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DependencyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DependencyApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DependencyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DependencyApi(string basePath)
        {
            this.Configuration = productconfigurator.Client.Configuration.MergeConfigurations(
                productconfigurator.Client.GlobalConfiguration.Instance,
                new productconfigurator.Client.Configuration { BasePath = basePath }
            );
            this.Client = new productconfigurator.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new productconfigurator.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = productconfigurator.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DependencyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DependencyApi(productconfigurator.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = productconfigurator.Client.Configuration.MergeConfigurations(
                productconfigurator.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new productconfigurator.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new productconfigurator.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = productconfigurator.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DependencyApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DependencyApi(productconfigurator.Client.ISynchronousClient client, productconfigurator.Client.IAsynchronousClient asyncClient, productconfigurator.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = productconfigurator.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public productconfigurator.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public productconfigurator.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public productconfigurator.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public productconfigurator.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Dependency Establish a new dependency for an existing step by specifying the tenant and step IDs. Utilize a POST request with the required dependency details in the body to seamlessly enhance the configuration logic of your product.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratordependencyEntity</returns>
        public ProductconfiguratordependencyEntity ProductConfiguratorCreateDependency(string tenantId, string stepId, ProductConfiguratorCreateDependencyRequest body, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratordependencyEntity> localVarResponse = ProductConfiguratorCreateDependencyWithHttpInfo(tenantId, stepId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Dependency Establish a new dependency for an existing step by specifying the tenant and step IDs. Utilize a POST request with the required dependency details in the body to seamlessly enhance the configuration logic of your product.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratordependencyEntity</returns>
        public productconfigurator.Client.ApiResponse<ProductconfiguratordependencyEntity> ProductConfiguratorCreateDependencyWithHttpInfo(string tenantId, string stepId, ProductConfiguratorCreateDependencyRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DependencyApi->ProductConfiguratorCreateDependency");
            }

            // verify the required parameter 'stepId' is set
            if (stepId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'stepId' when calling DependencyApi->ProductConfiguratorCreateDependency");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling DependencyApi->ProductConfiguratorCreateDependency");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stepId", productconfigurator.Client.ClientUtils.ParameterToString(stepId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DependencyApi.ProductConfiguratorCreateDependency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductconfiguratordependencyEntity>("/v1/{tenantId}/step/{stepId}/dependency/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorCreateDependency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Dependency Establish a new dependency for an existing step by specifying the tenant and step IDs. Utilize a POST request with the required dependency details in the body to seamlessly enhance the configuration logic of your product.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratordependencyEntity</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratordependencyEntity> ProductConfiguratorCreateDependencyAsync(string tenantId, string stepId, ProductConfiguratorCreateDependencyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratordependencyEntity> localVarResponse = await ProductConfiguratorCreateDependencyWithHttpInfoAsync(tenantId, stepId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Dependency Establish a new dependency for an existing step by specifying the tenant and step IDs. Utilize a POST request with the required dependency details in the body to seamlessly enhance the configuration logic of your product.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratordependencyEntity)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<ProductconfiguratordependencyEntity>> ProductConfiguratorCreateDependencyWithHttpInfoAsync(string tenantId, string stepId, ProductConfiguratorCreateDependencyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DependencyApi->ProductConfiguratorCreateDependency");
            }

            // verify the required parameter 'stepId' is set
            if (stepId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'stepId' when calling DependencyApi->ProductConfiguratorCreateDependency");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling DependencyApi->ProductConfiguratorCreateDependency");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stepId", productconfigurator.Client.ClientUtils.ParameterToString(stepId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DependencyApi.ProductConfiguratorCreateDependency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductconfiguratordependencyEntity>("/v1/{tenantId}/step/{stepId}/dependency/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorCreateDependency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Dependency Remove a specific dependency by specifying the tenant and dependency IDs. Ensure precision in dependency management with a straightforward DELETE request, simplifying the elimination of unwanted configuration logic.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="dependencyId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ProductConfiguratorDeleteDependency(string tenantId, string dependencyId, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<Object> localVarResponse = ProductConfiguratorDeleteDependencyWithHttpInfo(tenantId, dependencyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Dependency Remove a specific dependency by specifying the tenant and dependency IDs. Ensure precision in dependency management with a straightforward DELETE request, simplifying the elimination of unwanted configuration logic.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="dependencyId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public productconfigurator.Client.ApiResponse<Object> ProductConfiguratorDeleteDependencyWithHttpInfo(string tenantId, string dependencyId, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DependencyApi->ProductConfiguratorDeleteDependency");
            }

            // verify the required parameter 'dependencyId' is set
            if (dependencyId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'dependencyId' when calling DependencyApi->ProductConfiguratorDeleteDependency");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dependencyId", productconfigurator.Client.ClientUtils.ParameterToString(dependencyId)); // path parameter

            localVarRequestOptions.Operation = "DependencyApi.ProductConfiguratorDeleteDependency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/{tenantId}/dependency/{dependencyId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorDeleteDependency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Dependency Remove a specific dependency by specifying the tenant and dependency IDs. Ensure precision in dependency management with a straightforward DELETE request, simplifying the elimination of unwanted configuration logic.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="dependencyId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ProductConfiguratorDeleteDependencyAsync(string tenantId, string dependencyId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<Object> localVarResponse = await ProductConfiguratorDeleteDependencyWithHttpInfoAsync(tenantId, dependencyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Dependency Remove a specific dependency by specifying the tenant and dependency IDs. Ensure precision in dependency management with a straightforward DELETE request, simplifying the elimination of unwanted configuration logic.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="dependencyId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<Object>> ProductConfiguratorDeleteDependencyWithHttpInfoAsync(string tenantId, string dependencyId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DependencyApi->ProductConfiguratorDeleteDependency");
            }

            // verify the required parameter 'dependencyId' is set
            if (dependencyId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'dependencyId' when calling DependencyApi->ProductConfiguratorDeleteDependency");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dependencyId", productconfigurator.Client.ClientUtils.ParameterToString(dependencyId)); // path parameter

            localVarRequestOptions.Operation = "DependencyApi.ProductConfiguratorDeleteDependency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/{tenantId}/dependency/{dependencyId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorDeleteDependency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Dependencies Retrieve a list of dependencies based on the specified tenant ID. Customize results by specifying page size for efficient pagination. Submit an empty body to get all dependencies associated with the configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DependencyListDependenciesResponse</returns>
        public DependencyListDependenciesResponse ProductConfiguratorListDependencies(string tenantId, long pageSize, ProductConfiguratorListDependenciesRequest body, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<DependencyListDependenciesResponse> localVarResponse = ProductConfiguratorListDependenciesWithHttpInfo(tenantId, pageSize, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Dependencies Retrieve a list of dependencies based on the specified tenant ID. Customize results by specifying page size for efficient pagination. Submit an empty body to get all dependencies associated with the configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DependencyListDependenciesResponse</returns>
        public productconfigurator.Client.ApiResponse<DependencyListDependenciesResponse> ProductConfiguratorListDependenciesWithHttpInfo(string tenantId, long pageSize, ProductConfiguratorListDependenciesRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DependencyApi->ProductConfiguratorListDependencies");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling DependencyApi->ProductConfiguratorListDependencies");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", productconfigurator.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DependencyApi.ProductConfiguratorListDependencies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DependencyListDependenciesResponse>("/v1/{tenantId}/page-size/{pageSize}/dependencies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorListDependencies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Dependencies Retrieve a list of dependencies based on the specified tenant ID. Customize results by specifying page size for efficient pagination. Submit an empty body to get all dependencies associated with the configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DependencyListDependenciesResponse</returns>
        public async System.Threading.Tasks.Task<DependencyListDependenciesResponse> ProductConfiguratorListDependenciesAsync(string tenantId, long pageSize, ProductConfiguratorListDependenciesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<DependencyListDependenciesResponse> localVarResponse = await ProductConfiguratorListDependenciesWithHttpInfoAsync(tenantId, pageSize, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Dependencies Retrieve a list of dependencies based on the specified tenant ID. Customize results by specifying page size for efficient pagination. Submit an empty body to get all dependencies associated with the configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DependencyListDependenciesResponse)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<DependencyListDependenciesResponse>> ProductConfiguratorListDependenciesWithHttpInfoAsync(string tenantId, long pageSize, ProductConfiguratorListDependenciesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DependencyApi->ProductConfiguratorListDependencies");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling DependencyApi->ProductConfiguratorListDependencies");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", productconfigurator.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DependencyApi.ProductConfiguratorListDependencies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DependencyListDependenciesResponse>("/v1/{tenantId}/page-size/{pageSize}/dependencies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorListDependencies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Dependency Modify an existing dependency by specifying the tenant and dependency IDs. Utilize a PUT request with updated dependency details in the body for seamless customization and fine-tuning of your product configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="dependencyId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratordependencyEntity</returns>
        public ProductconfiguratordependencyEntity ProductConfiguratorUpdateDependency(string tenantId, string dependencyId, ProductConfiguratorUpdateDependencyRequest body, int operationIndex = 0)
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratordependencyEntity> localVarResponse = ProductConfiguratorUpdateDependencyWithHttpInfo(tenantId, dependencyId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Dependency Modify an existing dependency by specifying the tenant and dependency IDs. Utilize a PUT request with updated dependency details in the body for seamless customization and fine-tuning of your product configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="dependencyId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratordependencyEntity</returns>
        public productconfigurator.Client.ApiResponse<ProductconfiguratordependencyEntity> ProductConfiguratorUpdateDependencyWithHttpInfo(string tenantId, string dependencyId, ProductConfiguratorUpdateDependencyRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DependencyApi->ProductConfiguratorUpdateDependency");
            }

            // verify the required parameter 'dependencyId' is set
            if (dependencyId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'dependencyId' when calling DependencyApi->ProductConfiguratorUpdateDependency");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling DependencyApi->ProductConfiguratorUpdateDependency");
            }

            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dependencyId", productconfigurator.Client.ClientUtils.ParameterToString(dependencyId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DependencyApi.ProductConfiguratorUpdateDependency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductconfiguratordependencyEntity>("/v1/{tenantId}/dependency/{dependencyId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorUpdateDependency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Dependency Modify an existing dependency by specifying the tenant and dependency IDs. Utilize a PUT request with updated dependency details in the body for seamless customization and fine-tuning of your product configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="dependencyId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratordependencyEntity</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratordependencyEntity> ProductConfiguratorUpdateDependencyAsync(string tenantId, string dependencyId, ProductConfiguratorUpdateDependencyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            productconfigurator.Client.ApiResponse<ProductconfiguratordependencyEntity> localVarResponse = await ProductConfiguratorUpdateDependencyWithHttpInfoAsync(tenantId, dependencyId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Dependency Modify an existing dependency by specifying the tenant and dependency IDs. Utilize a PUT request with updated dependency details in the body for seamless customization and fine-tuning of your product configurations.
        /// </summary>
        /// <exception cref="productconfigurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="dependencyId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratordependencyEntity)</returns>
        public async System.Threading.Tasks.Task<productconfigurator.Client.ApiResponse<ProductconfiguratordependencyEntity>> ProductConfiguratorUpdateDependencyWithHttpInfoAsync(string tenantId, string dependencyId, ProductConfiguratorUpdateDependencyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DependencyApi->ProductConfiguratorUpdateDependency");
            }

            // verify the required parameter 'dependencyId' is set
            if (dependencyId == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'dependencyId' when calling DependencyApi->ProductConfiguratorUpdateDependency");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new productconfigurator.Client.ApiException(400, "Missing required parameter 'body' when calling DependencyApi->ProductConfiguratorUpdateDependency");
            }


            productconfigurator.Client.RequestOptions localVarRequestOptions = new productconfigurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = productconfigurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = productconfigurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", productconfigurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("dependencyId", productconfigurator.Client.ClientUtils.ParameterToString(dependencyId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DependencyApi.ProductConfiguratorUpdateDependency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductconfiguratordependencyEntity>("/v1/{tenantId}/dependency/{dependencyId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorUpdateDependency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
