/*
 * Product Configurator Service
 *
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using productconfigurator.Client;
using productconfigurator.Api;
// uncomment below to import models
//using productconfigurator.Model;

namespace productconfigurator.Test.Api
{
    /// <summary>
    ///  Class for testing DependencyApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DependencyApiTests : IDisposable
    {
        private DependencyApi instance;

        public DependencyApiTests()
        {
            instance = new DependencyApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DependencyApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DependencyApi
            //Assert.IsType<DependencyApi>(instance);
        }

        /// <summary>
        /// Test ProductConfiguratorCreateDependency
        /// </summary>
        [Fact]
        public void ProductConfiguratorCreateDependencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string stepId = null;
            //ProductConfiguratorCreateDependencyRequest body = null;
            //var response = instance.ProductConfiguratorCreateDependency(tenantId, stepId, body);
            //Assert.IsType<ProductconfiguratordependencyEntity>(response);
        }

        /// <summary>
        /// Test ProductConfiguratorDeleteDependency
        /// </summary>
        [Fact]
        public void ProductConfiguratorDeleteDependencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string dependencyId = null;
            //var response = instance.ProductConfiguratorDeleteDependency(tenantId, dependencyId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ProductConfiguratorListDependencies
        /// </summary>
        [Fact]
        public void ProductConfiguratorListDependenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //long pageSize = null;
            //ProductConfiguratorListDependenciesRequest body = null;
            //var response = instance.ProductConfiguratorListDependencies(tenantId, pageSize, body);
            //Assert.IsType<DependencyListDependenciesResponse>(response);
        }

        /// <summary>
        /// Test ProductConfiguratorUpdateDependency
        /// </summary>
        [Fact]
        public void ProductConfiguratorUpdateDependencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tenantId = null;
            //string dependencyId = null;
            //ProductConfiguratorUpdateDependencyRequest body = null;
            //var response = instance.ProductConfiguratorUpdateDependency(tenantId, dependencyId, body);
            //Assert.IsType<ProductconfiguratordependencyEntity>(response);
        }
    }
}
