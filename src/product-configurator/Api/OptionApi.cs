/*
 * Product Configurator Service
 *
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using product-configurator.Client;
using product-configurator.Client.Auth;
using product-configurator.Model;

namespace product-configurator.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOptionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Bulk Create Options
        /// </summary>
        /// <remarks>
        /// Add multiple options to an existing step simultaneously. Submit a POST request with the necessary option details in the body to efficiently expand the configuration possibilities in bulk. Streamline large-scale option management effortlessly.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratoroptionBulkCreateResponse</returns>
        ProductconfiguratoroptionBulkCreateResponse ProductConfiguratorBulkCreateOptions(string tenantId, string stepId, ProductConfiguratorBulkCreateOptionsRequest body, int operationIndex = 0);

        /// <summary>
        /// Bulk Create Options
        /// </summary>
        /// <remarks>
        /// Add multiple options to an existing step simultaneously. Submit a POST request with the necessary option details in the body to efficiently expand the configuration possibilities in bulk. Streamline large-scale option management effortlessly.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratoroptionBulkCreateResponse</returns>
        ApiResponse<ProductconfiguratoroptionBulkCreateResponse> ProductConfiguratorBulkCreateOptionsWithHttpInfo(string tenantId, string stepId, ProductConfiguratorBulkCreateOptionsRequest body, int operationIndex = 0);
        /// <summary>
        /// Bulk Delete Options
        /// </summary>
        /// <remarks>
        /// Efficiently remove multiple options from configurations using a bulk delete operation. Specify the tenant ID and submit a POST request with the list of option IDs in the body for streamlined option management.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ProductConfiguratorBulkDeleteOptions(string tenantId, ProductConfiguratorBulkDeleteOptionsRequest body, int operationIndex = 0);

        /// <summary>
        /// Bulk Delete Options
        /// </summary>
        /// <remarks>
        /// Efficiently remove multiple options from configurations using a bulk delete operation. Specify the tenant ID and submit a POST request with the list of option IDs in the body for streamlined option management.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ProductConfiguratorBulkDeleteOptionsWithHttpInfo(string tenantId, ProductConfiguratorBulkDeleteOptionsRequest body, int operationIndex = 0);
        /// <summary>
        /// Bulk Update Options
        /// </summary>
        /// <remarks>
        /// Effortlessly update multiple options. Specify the tenant ID and submit a PUT request with the updated option details in the body. Streamline the customization of a multitude of options in one go.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratoroptionBulkUpdateResponse</returns>
        ProductconfiguratoroptionBulkUpdateResponse ProductConfiguratorBulkUpdateOptions(string tenantId, ProductConfiguratorBulkUpdateOptionsRequest body, int operationIndex = 0);

        /// <summary>
        /// Bulk Update Options
        /// </summary>
        /// <remarks>
        /// Effortlessly update multiple options. Specify the tenant ID and submit a PUT request with the updated option details in the body. Streamline the customization of a multitude of options in one go.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratoroptionBulkUpdateResponse</returns>
        ApiResponse<ProductconfiguratoroptionBulkUpdateResponse> ProductConfiguratorBulkUpdateOptionsWithHttpInfo(string tenantId, ProductConfiguratorBulkUpdateOptionsRequest body, int operationIndex = 0);
        /// <summary>
        /// Copy Option
        /// </summary>
        /// <remarks>
        /// Duplicate an existing option from the source to a specified tenant. Utilize a POST request with an empty body to initiate the copy process, creating a new option based on the source configuration. Streamline option replication effortlessly.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="sourceOptionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratoroptionEntity</returns>
        ProductconfiguratoroptionEntity ProductConfiguratorCopyOption(string tenantId, string sourceOptionId, ProductConfiguratorCopyOptionRequest body, int operationIndex = 0);

        /// <summary>
        /// Copy Option
        /// </summary>
        /// <remarks>
        /// Duplicate an existing option from the source to a specified tenant. Utilize a POST request with an empty body to initiate the copy process, creating a new option based on the source configuration. Streamline option replication effortlessly.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="sourceOptionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratoroptionEntity</returns>
        ApiResponse<ProductconfiguratoroptionEntity> ProductConfiguratorCopyOptionWithHttpInfo(string tenantId, string sourceOptionId, ProductConfiguratorCopyOptionRequest body, int operationIndex = 0);
        /// <summary>
        /// Create Option
        /// </summary>
        /// <remarks>
        /// Integrate a new option into an existing step by specifying the tenant and step IDs. Use a POST request with the required option details in the body for seamless customization and expansion of product configurations.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratoroptionEntity</returns>
        ProductconfiguratoroptionEntity ProductConfiguratorCreateOption(string tenantId, string stepId, ProductConfiguratorCreateOptionRequest body, int operationIndex = 0);

        /// <summary>
        /// Create Option
        /// </summary>
        /// <remarks>
        /// Integrate a new option into an existing step by specifying the tenant and step IDs. Use a POST request with the required option details in the body for seamless customization and expansion of product configurations.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratoroptionEntity</returns>
        ApiResponse<ProductconfiguratoroptionEntity> ProductConfiguratorCreateOptionWithHttpInfo(string tenantId, string stepId, ProductConfiguratorCreateOptionRequest body, int operationIndex = 0);
        /// <summary>
        /// Delete Option
        /// </summary>
        /// <remarks>
        /// Remove a specific option by specifying the tenant and option IDs. Ensure precision in option management with a straightforward DELETE request, simplifying the elimination of unwanted configuration choices.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="optionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ProductConfiguratorDeleteOption(string tenantId, string optionId, int operationIndex = 0);

        /// <summary>
        /// Delete Option
        /// </summary>
        /// <remarks>
        /// Remove a specific option by specifying the tenant and option IDs. Ensure precision in option management with a straightforward DELETE request, simplifying the elimination of unwanted configuration choices.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="optionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ProductConfiguratorDeleteOptionWithHttpInfo(string tenantId, string optionId, int operationIndex = 0);
        /// <summary>
        /// List Options
        /// </summary>
        /// <remarks>
        /// Retrieve a list of options for a specific step based on tenant and step IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all options associated with the step.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OptionListOptionsResponse</returns>
        OptionListOptionsResponse ProductConfiguratorListOptions(string tenantId, string stepId, long pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0);

        /// <summary>
        /// List Options
        /// </summary>
        /// <remarks>
        /// Retrieve a list of options for a specific step based on tenant and step IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all options associated with the step.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OptionListOptionsResponse</returns>
        ApiResponse<OptionListOptionsResponse> ProductConfiguratorListOptionsWithHttpInfo(string tenantId, string stepId, long pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0);
        /// <summary>
        /// Update Option
        /// </summary>
        /// <remarks>
        /// Modify an existing option by specifying the tenant and option IDs. Utilize a PUT request with updated option details in the body for seamless customization and fine-tuning of your product configurations.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="optionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratoroptionEntity</returns>
        ProductconfiguratoroptionEntity ProductConfiguratorUpdateOption(string tenantId, string optionId, ProductConfiguratorUpdateOptionRequest body, int operationIndex = 0);

        /// <summary>
        /// Update Option
        /// </summary>
        /// <remarks>
        /// Modify an existing option by specifying the tenant and option IDs. Utilize a PUT request with updated option details in the body for seamless customization and fine-tuning of your product configurations.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="optionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratoroptionEntity</returns>
        ApiResponse<ProductconfiguratoroptionEntity> ProductConfiguratorUpdateOptionWithHttpInfo(string tenantId, string optionId, ProductConfiguratorUpdateOptionRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOptionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Bulk Create Options
        /// </summary>
        /// <remarks>
        /// Add multiple options to an existing step simultaneously. Submit a POST request with the necessary option details in the body to efficiently expand the configuration possibilities in bulk. Streamline large-scale option management effortlessly.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratoroptionBulkCreateResponse</returns>
        System.Threading.Tasks.Task<ProductconfiguratoroptionBulkCreateResponse> ProductConfiguratorBulkCreateOptionsAsync(string tenantId, string stepId, ProductConfiguratorBulkCreateOptionsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Bulk Create Options
        /// </summary>
        /// <remarks>
        /// Add multiple options to an existing step simultaneously. Submit a POST request with the necessary option details in the body to efficiently expand the configuration possibilities in bulk. Streamline large-scale option management effortlessly.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratoroptionBulkCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratoroptionBulkCreateResponse>> ProductConfiguratorBulkCreateOptionsWithHttpInfoAsync(string tenantId, string stepId, ProductConfiguratorBulkCreateOptionsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Bulk Delete Options
        /// </summary>
        /// <remarks>
        /// Efficiently remove multiple options from configurations using a bulk delete operation. Specify the tenant ID and submit a POST request with the list of option IDs in the body for streamlined option management.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ProductConfiguratorBulkDeleteOptionsAsync(string tenantId, ProductConfiguratorBulkDeleteOptionsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Bulk Delete Options
        /// </summary>
        /// <remarks>
        /// Efficiently remove multiple options from configurations using a bulk delete operation. Specify the tenant ID and submit a POST request with the list of option IDs in the body for streamlined option management.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductConfiguratorBulkDeleteOptionsWithHttpInfoAsync(string tenantId, ProductConfiguratorBulkDeleteOptionsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Bulk Update Options
        /// </summary>
        /// <remarks>
        /// Effortlessly update multiple options. Specify the tenant ID and submit a PUT request with the updated option details in the body. Streamline the customization of a multitude of options in one go.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratoroptionBulkUpdateResponse</returns>
        System.Threading.Tasks.Task<ProductconfiguratoroptionBulkUpdateResponse> ProductConfiguratorBulkUpdateOptionsAsync(string tenantId, ProductConfiguratorBulkUpdateOptionsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Bulk Update Options
        /// </summary>
        /// <remarks>
        /// Effortlessly update multiple options. Specify the tenant ID and submit a PUT request with the updated option details in the body. Streamline the customization of a multitude of options in one go.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratoroptionBulkUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratoroptionBulkUpdateResponse>> ProductConfiguratorBulkUpdateOptionsWithHttpInfoAsync(string tenantId, ProductConfiguratorBulkUpdateOptionsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Copy Option
        /// </summary>
        /// <remarks>
        /// Duplicate an existing option from the source to a specified tenant. Utilize a POST request with an empty body to initiate the copy process, creating a new option based on the source configuration. Streamline option replication effortlessly.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="sourceOptionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratoroptionEntity</returns>
        System.Threading.Tasks.Task<ProductconfiguratoroptionEntity> ProductConfiguratorCopyOptionAsync(string tenantId, string sourceOptionId, ProductConfiguratorCopyOptionRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Copy Option
        /// </summary>
        /// <remarks>
        /// Duplicate an existing option from the source to a specified tenant. Utilize a POST request with an empty body to initiate the copy process, creating a new option based on the source configuration. Streamline option replication effortlessly.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="sourceOptionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratoroptionEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratoroptionEntity>> ProductConfiguratorCopyOptionWithHttpInfoAsync(string tenantId, string sourceOptionId, ProductConfiguratorCopyOptionRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Option
        /// </summary>
        /// <remarks>
        /// Integrate a new option into an existing step by specifying the tenant and step IDs. Use a POST request with the required option details in the body for seamless customization and expansion of product configurations.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratoroptionEntity</returns>
        System.Threading.Tasks.Task<ProductconfiguratoroptionEntity> ProductConfiguratorCreateOptionAsync(string tenantId, string stepId, ProductConfiguratorCreateOptionRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Option
        /// </summary>
        /// <remarks>
        /// Integrate a new option into an existing step by specifying the tenant and step IDs. Use a POST request with the required option details in the body for seamless customization and expansion of product configurations.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratoroptionEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratoroptionEntity>> ProductConfiguratorCreateOptionWithHttpInfoAsync(string tenantId, string stepId, ProductConfiguratorCreateOptionRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Option
        /// </summary>
        /// <remarks>
        /// Remove a specific option by specifying the tenant and option IDs. Ensure precision in option management with a straightforward DELETE request, simplifying the elimination of unwanted configuration choices.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="optionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ProductConfiguratorDeleteOptionAsync(string tenantId, string optionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Option
        /// </summary>
        /// <remarks>
        /// Remove a specific option by specifying the tenant and option IDs. Ensure precision in option management with a straightforward DELETE request, simplifying the elimination of unwanted configuration choices.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="optionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductConfiguratorDeleteOptionWithHttpInfoAsync(string tenantId, string optionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Options
        /// </summary>
        /// <remarks>
        /// Retrieve a list of options for a specific step based on tenant and step IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all options associated with the step.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionListOptionsResponse</returns>
        System.Threading.Tasks.Task<OptionListOptionsResponse> ProductConfiguratorListOptionsAsync(string tenantId, string stepId, long pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Options
        /// </summary>
        /// <remarks>
        /// Retrieve a list of options for a specific step based on tenant and step IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all options associated with the step.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionListOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OptionListOptionsResponse>> ProductConfiguratorListOptionsWithHttpInfoAsync(string tenantId, string stepId, long pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Option
        /// </summary>
        /// <remarks>
        /// Modify an existing option by specifying the tenant and option IDs. Utilize a PUT request with updated option details in the body for seamless customization and fine-tuning of your product configurations.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="optionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratoroptionEntity</returns>
        System.Threading.Tasks.Task<ProductconfiguratoroptionEntity> ProductConfiguratorUpdateOptionAsync(string tenantId, string optionId, ProductConfiguratorUpdateOptionRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Option
        /// </summary>
        /// <remarks>
        /// Modify an existing option by specifying the tenant and option IDs. Utilize a PUT request with updated option details in the body for seamless customization and fine-tuning of your product configurations.
        /// </remarks>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="optionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratoroptionEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductconfiguratoroptionEntity>> ProductConfiguratorUpdateOptionWithHttpInfoAsync(string tenantId, string optionId, ProductConfiguratorUpdateOptionRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOptionApi : IOptionApiSync, IOptionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OptionApi : IOptionApi
    {
        private product-configurator.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OptionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OptionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OptionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OptionApi(string basePath)
        {
            this.Configuration = product-configurator.Client.Configuration.MergeConfigurations(
                product-configurator.Client.GlobalConfiguration.Instance,
                new product-configurator.Client.Configuration { BasePath = basePath }
            );
            this.Client = new product-configurator.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new product-configurator.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = product-configurator.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OptionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OptionApi(product-configurator.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = product-configurator.Client.Configuration.MergeConfigurations(
                product-configurator.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new product-configurator.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new product-configurator.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = product-configurator.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OptionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OptionApi(product-configurator.Client.ISynchronousClient client, product-configurator.Client.IAsynchronousClient asyncClient, product-configurator.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = product-configurator.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public product-configurator.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public product-configurator.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public product-configurator.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public product-configurator.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Bulk Create Options Add multiple options to an existing step simultaneously. Submit a POST request with the necessary option details in the body to efficiently expand the configuration possibilities in bulk. Streamline large-scale option management effortlessly.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratoroptionBulkCreateResponse</returns>
        public ProductconfiguratoroptionBulkCreateResponse ProductConfiguratorBulkCreateOptions(string tenantId, string stepId, ProductConfiguratorBulkCreateOptionsRequest body, int operationIndex = 0)
        {
            product-configurator.Client.ApiResponse<ProductconfiguratoroptionBulkCreateResponse> localVarResponse = ProductConfiguratorBulkCreateOptionsWithHttpInfo(tenantId, stepId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Create Options Add multiple options to an existing step simultaneously. Submit a POST request with the necessary option details in the body to efficiently expand the configuration possibilities in bulk. Streamline large-scale option management effortlessly.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratoroptionBulkCreateResponse</returns>
        public product-configurator.Client.ApiResponse<ProductconfiguratoroptionBulkCreateResponse> ProductConfiguratorBulkCreateOptionsWithHttpInfo(string tenantId, string stepId, ProductConfiguratorBulkCreateOptionsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling OptionApi->ProductConfiguratorBulkCreateOptions");
            }

            // verify the required parameter 'stepId' is set
            if (stepId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'stepId' when calling OptionApi->ProductConfiguratorBulkCreateOptions");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'body' when calling OptionApi->ProductConfiguratorBulkCreateOptions");
            }

            product-configurator.Client.RequestOptions localVarRequestOptions = new product-configurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-configurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-configurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", product-configurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stepId", product-configurator.Client.ClientUtils.ParameterToString(stepId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "OptionApi.ProductConfiguratorBulkCreateOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductconfiguratoroptionBulkCreateResponse>("/v1/{tenantId}/step/{stepId}/option/create/bulk", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorBulkCreateOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Bulk Create Options Add multiple options to an existing step simultaneously. Submit a POST request with the necessary option details in the body to efficiently expand the configuration possibilities in bulk. Streamline large-scale option management effortlessly.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratoroptionBulkCreateResponse</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratoroptionBulkCreateResponse> ProductConfiguratorBulkCreateOptionsAsync(string tenantId, string stepId, ProductConfiguratorBulkCreateOptionsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-configurator.Client.ApiResponse<ProductconfiguratoroptionBulkCreateResponse> localVarResponse = await ProductConfiguratorBulkCreateOptionsWithHttpInfoAsync(tenantId, stepId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Create Options Add multiple options to an existing step simultaneously. Submit a POST request with the necessary option details in the body to efficiently expand the configuration possibilities in bulk. Streamline large-scale option management effortlessly.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratoroptionBulkCreateResponse)</returns>
        public async System.Threading.Tasks.Task<product-configurator.Client.ApiResponse<ProductconfiguratoroptionBulkCreateResponse>> ProductConfiguratorBulkCreateOptionsWithHttpInfoAsync(string tenantId, string stepId, ProductConfiguratorBulkCreateOptionsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling OptionApi->ProductConfiguratorBulkCreateOptions");
            }

            // verify the required parameter 'stepId' is set
            if (stepId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'stepId' when calling OptionApi->ProductConfiguratorBulkCreateOptions");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'body' when calling OptionApi->ProductConfiguratorBulkCreateOptions");
            }


            product-configurator.Client.RequestOptions localVarRequestOptions = new product-configurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-configurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-configurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", product-configurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stepId", product-configurator.Client.ClientUtils.ParameterToString(stepId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "OptionApi.ProductConfiguratorBulkCreateOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductconfiguratoroptionBulkCreateResponse>("/v1/{tenantId}/step/{stepId}/option/create/bulk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorBulkCreateOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Bulk Delete Options Efficiently remove multiple options from configurations using a bulk delete operation. Specify the tenant ID and submit a POST request with the list of option IDs in the body for streamlined option management.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ProductConfiguratorBulkDeleteOptions(string tenantId, ProductConfiguratorBulkDeleteOptionsRequest body, int operationIndex = 0)
        {
            product-configurator.Client.ApiResponse<Object> localVarResponse = ProductConfiguratorBulkDeleteOptionsWithHttpInfo(tenantId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Delete Options Efficiently remove multiple options from configurations using a bulk delete operation. Specify the tenant ID and submit a POST request with the list of option IDs in the body for streamlined option management.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public product-configurator.Client.ApiResponse<Object> ProductConfiguratorBulkDeleteOptionsWithHttpInfo(string tenantId, ProductConfiguratorBulkDeleteOptionsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling OptionApi->ProductConfiguratorBulkDeleteOptions");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'body' when calling OptionApi->ProductConfiguratorBulkDeleteOptions");
            }

            product-configurator.Client.RequestOptions localVarRequestOptions = new product-configurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-configurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-configurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", product-configurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "OptionApi.ProductConfiguratorBulkDeleteOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/{tenantId}/option/delete/bulk", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorBulkDeleteOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Bulk Delete Options Efficiently remove multiple options from configurations using a bulk delete operation. Specify the tenant ID and submit a POST request with the list of option IDs in the body for streamlined option management.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ProductConfiguratorBulkDeleteOptionsAsync(string tenantId, ProductConfiguratorBulkDeleteOptionsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-configurator.Client.ApiResponse<Object> localVarResponse = await ProductConfiguratorBulkDeleteOptionsWithHttpInfoAsync(tenantId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Delete Options Efficiently remove multiple options from configurations using a bulk delete operation. Specify the tenant ID and submit a POST request with the list of option IDs in the body for streamlined option management.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<product-configurator.Client.ApiResponse<Object>> ProductConfiguratorBulkDeleteOptionsWithHttpInfoAsync(string tenantId, ProductConfiguratorBulkDeleteOptionsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling OptionApi->ProductConfiguratorBulkDeleteOptions");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'body' when calling OptionApi->ProductConfiguratorBulkDeleteOptions");
            }


            product-configurator.Client.RequestOptions localVarRequestOptions = new product-configurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-configurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-configurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", product-configurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "OptionApi.ProductConfiguratorBulkDeleteOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/{tenantId}/option/delete/bulk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorBulkDeleteOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Bulk Update Options Effortlessly update multiple options. Specify the tenant ID and submit a PUT request with the updated option details in the body. Streamline the customization of a multitude of options in one go.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratoroptionBulkUpdateResponse</returns>
        public ProductconfiguratoroptionBulkUpdateResponse ProductConfiguratorBulkUpdateOptions(string tenantId, ProductConfiguratorBulkUpdateOptionsRequest body, int operationIndex = 0)
        {
            product-configurator.Client.ApiResponse<ProductconfiguratoroptionBulkUpdateResponse> localVarResponse = ProductConfiguratorBulkUpdateOptionsWithHttpInfo(tenantId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Update Options Effortlessly update multiple options. Specify the tenant ID and submit a PUT request with the updated option details in the body. Streamline the customization of a multitude of options in one go.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratoroptionBulkUpdateResponse</returns>
        public product-configurator.Client.ApiResponse<ProductconfiguratoroptionBulkUpdateResponse> ProductConfiguratorBulkUpdateOptionsWithHttpInfo(string tenantId, ProductConfiguratorBulkUpdateOptionsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling OptionApi->ProductConfiguratorBulkUpdateOptions");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'body' when calling OptionApi->ProductConfiguratorBulkUpdateOptions");
            }

            product-configurator.Client.RequestOptions localVarRequestOptions = new product-configurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-configurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-configurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", product-configurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "OptionApi.ProductConfiguratorBulkUpdateOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductconfiguratoroptionBulkUpdateResponse>("/v1/{tenantId}/option/bulk", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorBulkUpdateOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Bulk Update Options Effortlessly update multiple options. Specify the tenant ID and submit a PUT request with the updated option details in the body. Streamline the customization of a multitude of options in one go.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratoroptionBulkUpdateResponse</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratoroptionBulkUpdateResponse> ProductConfiguratorBulkUpdateOptionsAsync(string tenantId, ProductConfiguratorBulkUpdateOptionsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-configurator.Client.ApiResponse<ProductconfiguratoroptionBulkUpdateResponse> localVarResponse = await ProductConfiguratorBulkUpdateOptionsWithHttpInfoAsync(tenantId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Update Options Effortlessly update multiple options. Specify the tenant ID and submit a PUT request with the updated option details in the body. Streamline the customization of a multitude of options in one go.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratoroptionBulkUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<product-configurator.Client.ApiResponse<ProductconfiguratoroptionBulkUpdateResponse>> ProductConfiguratorBulkUpdateOptionsWithHttpInfoAsync(string tenantId, ProductConfiguratorBulkUpdateOptionsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling OptionApi->ProductConfiguratorBulkUpdateOptions");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'body' when calling OptionApi->ProductConfiguratorBulkUpdateOptions");
            }


            product-configurator.Client.RequestOptions localVarRequestOptions = new product-configurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-configurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-configurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", product-configurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "OptionApi.ProductConfiguratorBulkUpdateOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductconfiguratoroptionBulkUpdateResponse>("/v1/{tenantId}/option/bulk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorBulkUpdateOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy Option Duplicate an existing option from the source to a specified tenant. Utilize a POST request with an empty body to initiate the copy process, creating a new option based on the source configuration. Streamline option replication effortlessly.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="sourceOptionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratoroptionEntity</returns>
        public ProductconfiguratoroptionEntity ProductConfiguratorCopyOption(string tenantId, string sourceOptionId, ProductConfiguratorCopyOptionRequest body, int operationIndex = 0)
        {
            product-configurator.Client.ApiResponse<ProductconfiguratoroptionEntity> localVarResponse = ProductConfiguratorCopyOptionWithHttpInfo(tenantId, sourceOptionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy Option Duplicate an existing option from the source to a specified tenant. Utilize a POST request with an empty body to initiate the copy process, creating a new option based on the source configuration. Streamline option replication effortlessly.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="sourceOptionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratoroptionEntity</returns>
        public product-configurator.Client.ApiResponse<ProductconfiguratoroptionEntity> ProductConfiguratorCopyOptionWithHttpInfo(string tenantId, string sourceOptionId, ProductConfiguratorCopyOptionRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling OptionApi->ProductConfiguratorCopyOption");
            }

            // verify the required parameter 'sourceOptionId' is set
            if (sourceOptionId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'sourceOptionId' when calling OptionApi->ProductConfiguratorCopyOption");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'body' when calling OptionApi->ProductConfiguratorCopyOption");
            }

            product-configurator.Client.RequestOptions localVarRequestOptions = new product-configurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-configurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-configurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", product-configurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceOptionId", product-configurator.Client.ClientUtils.ParameterToString(sourceOptionId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "OptionApi.ProductConfiguratorCopyOption";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductconfiguratoroptionEntity>("/v1/{tenantId}/option/{sourceOptionId}/copy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorCopyOption", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy Option Duplicate an existing option from the source to a specified tenant. Utilize a POST request with an empty body to initiate the copy process, creating a new option based on the source configuration. Streamline option replication effortlessly.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="sourceOptionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratoroptionEntity</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratoroptionEntity> ProductConfiguratorCopyOptionAsync(string tenantId, string sourceOptionId, ProductConfiguratorCopyOptionRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-configurator.Client.ApiResponse<ProductconfiguratoroptionEntity> localVarResponse = await ProductConfiguratorCopyOptionWithHttpInfoAsync(tenantId, sourceOptionId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy Option Duplicate an existing option from the source to a specified tenant. Utilize a POST request with an empty body to initiate the copy process, creating a new option based on the source configuration. Streamline option replication effortlessly.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="sourceOptionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratoroptionEntity)</returns>
        public async System.Threading.Tasks.Task<product-configurator.Client.ApiResponse<ProductconfiguratoroptionEntity>> ProductConfiguratorCopyOptionWithHttpInfoAsync(string tenantId, string sourceOptionId, ProductConfiguratorCopyOptionRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling OptionApi->ProductConfiguratorCopyOption");
            }

            // verify the required parameter 'sourceOptionId' is set
            if (sourceOptionId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'sourceOptionId' when calling OptionApi->ProductConfiguratorCopyOption");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'body' when calling OptionApi->ProductConfiguratorCopyOption");
            }


            product-configurator.Client.RequestOptions localVarRequestOptions = new product-configurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-configurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-configurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", product-configurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceOptionId", product-configurator.Client.ClientUtils.ParameterToString(sourceOptionId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "OptionApi.ProductConfiguratorCopyOption";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductconfiguratoroptionEntity>("/v1/{tenantId}/option/{sourceOptionId}/copy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorCopyOption", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Option Integrate a new option into an existing step by specifying the tenant and step IDs. Use a POST request with the required option details in the body for seamless customization and expansion of product configurations.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratoroptionEntity</returns>
        public ProductconfiguratoroptionEntity ProductConfiguratorCreateOption(string tenantId, string stepId, ProductConfiguratorCreateOptionRequest body, int operationIndex = 0)
        {
            product-configurator.Client.ApiResponse<ProductconfiguratoroptionEntity> localVarResponse = ProductConfiguratorCreateOptionWithHttpInfo(tenantId, stepId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Option Integrate a new option into an existing step by specifying the tenant and step IDs. Use a POST request with the required option details in the body for seamless customization and expansion of product configurations.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratoroptionEntity</returns>
        public product-configurator.Client.ApiResponse<ProductconfiguratoroptionEntity> ProductConfiguratorCreateOptionWithHttpInfo(string tenantId, string stepId, ProductConfiguratorCreateOptionRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling OptionApi->ProductConfiguratorCreateOption");
            }

            // verify the required parameter 'stepId' is set
            if (stepId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'stepId' when calling OptionApi->ProductConfiguratorCreateOption");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'body' when calling OptionApi->ProductConfiguratorCreateOption");
            }

            product-configurator.Client.RequestOptions localVarRequestOptions = new product-configurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-configurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-configurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", product-configurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stepId", product-configurator.Client.ClientUtils.ParameterToString(stepId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "OptionApi.ProductConfiguratorCreateOption";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductconfiguratoroptionEntity>("/v1/{tenantId}/step/{stepId}/option/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorCreateOption", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Option Integrate a new option into an existing step by specifying the tenant and step IDs. Use a POST request with the required option details in the body for seamless customization and expansion of product configurations.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratoroptionEntity</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratoroptionEntity> ProductConfiguratorCreateOptionAsync(string tenantId, string stepId, ProductConfiguratorCreateOptionRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-configurator.Client.ApiResponse<ProductconfiguratoroptionEntity> localVarResponse = await ProductConfiguratorCreateOptionWithHttpInfoAsync(tenantId, stepId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Option Integrate a new option into an existing step by specifying the tenant and step IDs. Use a POST request with the required option details in the body for seamless customization and expansion of product configurations.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratoroptionEntity)</returns>
        public async System.Threading.Tasks.Task<product-configurator.Client.ApiResponse<ProductconfiguratoroptionEntity>> ProductConfiguratorCreateOptionWithHttpInfoAsync(string tenantId, string stepId, ProductConfiguratorCreateOptionRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling OptionApi->ProductConfiguratorCreateOption");
            }

            // verify the required parameter 'stepId' is set
            if (stepId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'stepId' when calling OptionApi->ProductConfiguratorCreateOption");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'body' when calling OptionApi->ProductConfiguratorCreateOption");
            }


            product-configurator.Client.RequestOptions localVarRequestOptions = new product-configurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-configurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-configurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", product-configurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stepId", product-configurator.Client.ClientUtils.ParameterToString(stepId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "OptionApi.ProductConfiguratorCreateOption";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductconfiguratoroptionEntity>("/v1/{tenantId}/step/{stepId}/option/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorCreateOption", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Option Remove a specific option by specifying the tenant and option IDs. Ensure precision in option management with a straightforward DELETE request, simplifying the elimination of unwanted configuration choices.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="optionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ProductConfiguratorDeleteOption(string tenantId, string optionId, int operationIndex = 0)
        {
            product-configurator.Client.ApiResponse<Object> localVarResponse = ProductConfiguratorDeleteOptionWithHttpInfo(tenantId, optionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Option Remove a specific option by specifying the tenant and option IDs. Ensure precision in option management with a straightforward DELETE request, simplifying the elimination of unwanted configuration choices.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="optionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public product-configurator.Client.ApiResponse<Object> ProductConfiguratorDeleteOptionWithHttpInfo(string tenantId, string optionId, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling OptionApi->ProductConfiguratorDeleteOption");
            }

            // verify the required parameter 'optionId' is set
            if (optionId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'optionId' when calling OptionApi->ProductConfiguratorDeleteOption");
            }

            product-configurator.Client.RequestOptions localVarRequestOptions = new product-configurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-configurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-configurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", product-configurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("optionId", product-configurator.Client.ClientUtils.ParameterToString(optionId)); // path parameter

            localVarRequestOptions.Operation = "OptionApi.ProductConfiguratorDeleteOption";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/{tenantId}/option/{optionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorDeleteOption", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Option Remove a specific option by specifying the tenant and option IDs. Ensure precision in option management with a straightforward DELETE request, simplifying the elimination of unwanted configuration choices.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="optionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ProductConfiguratorDeleteOptionAsync(string tenantId, string optionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-configurator.Client.ApiResponse<Object> localVarResponse = await ProductConfiguratorDeleteOptionWithHttpInfoAsync(tenantId, optionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Option Remove a specific option by specifying the tenant and option IDs. Ensure precision in option management with a straightforward DELETE request, simplifying the elimination of unwanted configuration choices.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="optionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<product-configurator.Client.ApiResponse<Object>> ProductConfiguratorDeleteOptionWithHttpInfoAsync(string tenantId, string optionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling OptionApi->ProductConfiguratorDeleteOption");
            }

            // verify the required parameter 'optionId' is set
            if (optionId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'optionId' when calling OptionApi->ProductConfiguratorDeleteOption");
            }


            product-configurator.Client.RequestOptions localVarRequestOptions = new product-configurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-configurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-configurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", product-configurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("optionId", product-configurator.Client.ClientUtils.ParameterToString(optionId)); // path parameter

            localVarRequestOptions.Operation = "OptionApi.ProductConfiguratorDeleteOption";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/{tenantId}/option/{optionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorDeleteOption", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Options Retrieve a list of options for a specific step based on tenant and step IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all options associated with the step.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OptionListOptionsResponse</returns>
        public OptionListOptionsResponse ProductConfiguratorListOptions(string tenantId, string stepId, long pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0)
        {
            product-configurator.Client.ApiResponse<OptionListOptionsResponse> localVarResponse = ProductConfiguratorListOptionsWithHttpInfo(tenantId, stepId, pageSize, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Options Retrieve a list of options for a specific step based on tenant and step IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all options associated with the step.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OptionListOptionsResponse</returns>
        public product-configurator.Client.ApiResponse<OptionListOptionsResponse> ProductConfiguratorListOptionsWithHttpInfo(string tenantId, string stepId, long pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling OptionApi->ProductConfiguratorListOptions");
            }

            // verify the required parameter 'stepId' is set
            if (stepId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'stepId' when calling OptionApi->ProductConfiguratorListOptions");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'body' when calling OptionApi->ProductConfiguratorListOptions");
            }

            product-configurator.Client.RequestOptions localVarRequestOptions = new product-configurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-configurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-configurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", product-configurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stepId", product-configurator.Client.ClientUtils.ParameterToString(stepId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", product-configurator.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "OptionApi.ProductConfiguratorListOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OptionListOptionsResponse>("/v1/{tenantId}/step/{stepId}/page-size/{pageSize}/options", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorListOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Options Retrieve a list of options for a specific step based on tenant and step IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all options associated with the step.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OptionListOptionsResponse</returns>
        public async System.Threading.Tasks.Task<OptionListOptionsResponse> ProductConfiguratorListOptionsAsync(string tenantId, string stepId, long pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-configurator.Client.ApiResponse<OptionListOptionsResponse> localVarResponse = await ProductConfiguratorListOptionsWithHttpInfoAsync(tenantId, stepId, pageSize, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Options Retrieve a list of options for a specific step based on tenant and step IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all options associated with the step.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="stepId"></param>
        /// <param name="pageSize"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OptionListOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<product-configurator.Client.ApiResponse<OptionListOptionsResponse>> ProductConfiguratorListOptionsWithHttpInfoAsync(string tenantId, string stepId, long pageSize, ProductConfiguratorListPropertiesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling OptionApi->ProductConfiguratorListOptions");
            }

            // verify the required parameter 'stepId' is set
            if (stepId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'stepId' when calling OptionApi->ProductConfiguratorListOptions");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'body' when calling OptionApi->ProductConfiguratorListOptions");
            }


            product-configurator.Client.RequestOptions localVarRequestOptions = new product-configurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-configurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-configurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", product-configurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stepId", product-configurator.Client.ClientUtils.ParameterToString(stepId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", product-configurator.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "OptionApi.ProductConfiguratorListOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OptionListOptionsResponse>("/v1/{tenantId}/step/{stepId}/page-size/{pageSize}/options", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorListOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Option Modify an existing option by specifying the tenant and option IDs. Utilize a PUT request with updated option details in the body for seamless customization and fine-tuning of your product configurations.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="optionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductconfiguratoroptionEntity</returns>
        public ProductconfiguratoroptionEntity ProductConfiguratorUpdateOption(string tenantId, string optionId, ProductConfiguratorUpdateOptionRequest body, int operationIndex = 0)
        {
            product-configurator.Client.ApiResponse<ProductconfiguratoroptionEntity> localVarResponse = ProductConfiguratorUpdateOptionWithHttpInfo(tenantId, optionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Option Modify an existing option by specifying the tenant and option IDs. Utilize a PUT request with updated option details in the body for seamless customization and fine-tuning of your product configurations.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="optionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductconfiguratoroptionEntity</returns>
        public product-configurator.Client.ApiResponse<ProductconfiguratoroptionEntity> ProductConfiguratorUpdateOptionWithHttpInfo(string tenantId, string optionId, ProductConfiguratorUpdateOptionRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling OptionApi->ProductConfiguratorUpdateOption");
            }

            // verify the required parameter 'optionId' is set
            if (optionId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'optionId' when calling OptionApi->ProductConfiguratorUpdateOption");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'body' when calling OptionApi->ProductConfiguratorUpdateOption");
            }

            product-configurator.Client.RequestOptions localVarRequestOptions = new product-configurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-configurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-configurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", product-configurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("optionId", product-configurator.Client.ClientUtils.ParameterToString(optionId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "OptionApi.ProductConfiguratorUpdateOption";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductconfiguratoroptionEntity>("/v1/{tenantId}/option/{optionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorUpdateOption", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Option Modify an existing option by specifying the tenant and option IDs. Utilize a PUT request with updated option details in the body for seamless customization and fine-tuning of your product configurations.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="optionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductconfiguratoroptionEntity</returns>
        public async System.Threading.Tasks.Task<ProductconfiguratoroptionEntity> ProductConfiguratorUpdateOptionAsync(string tenantId, string optionId, ProductConfiguratorUpdateOptionRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-configurator.Client.ApiResponse<ProductconfiguratoroptionEntity> localVarResponse = await ProductConfiguratorUpdateOptionWithHttpInfoAsync(tenantId, optionId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Option Modify an existing option by specifying the tenant and option IDs. Utilize a PUT request with updated option details in the body for seamless customization and fine-tuning of your product configurations.
        /// </summary>
        /// <exception cref="product-configurator.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId"></param>
        /// <param name="optionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductconfiguratoroptionEntity)</returns>
        public async System.Threading.Tasks.Task<product-configurator.Client.ApiResponse<ProductconfiguratoroptionEntity>> ProductConfiguratorUpdateOptionWithHttpInfoAsync(string tenantId, string optionId, ProductConfiguratorUpdateOptionRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'tenantId' when calling OptionApi->ProductConfiguratorUpdateOption");
            }

            // verify the required parameter 'optionId' is set
            if (optionId == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'optionId' when calling OptionApi->ProductConfiguratorUpdateOption");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-configurator.Client.ApiException(400, "Missing required parameter 'body' when calling OptionApi->ProductConfiguratorUpdateOption");
            }


            product-configurator.Client.RequestOptions localVarRequestOptions = new product-configurator.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-configurator.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-configurator.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenantId", product-configurator.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("optionId", product-configurator.Client.ClientUtils.ParameterToString(optionId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "OptionApi.ProductConfiguratorUpdateOption";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (APIAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductconfiguratoroptionEntity>("/v1/{tenantId}/option/{optionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductConfiguratorUpdateOption", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
